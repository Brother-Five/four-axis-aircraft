; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\systemtimer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\systemtimer.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\flash\obj\systemtimer.crf ..\..\MySrc\SystemTimer.c]
                          THUMB

                          AREA ||i.Initial_System_Timer||, CODE, READONLY, ALIGN=2

                  Initial_System_Timer PROC
;;;3      //初始化TIM5 32位定时器，用于做系统的时钟。
;;;4      void Initial_System_Timer(void){
000000  b50e              PUSH     {r1-r3,lr}
;;;5      
;;;6      	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
;;;7      
;;;8      	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);  ///使能TIM3时钟
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;9      
;;;10         TIM_TimeBaseInitStructure.TIM_Period = 0xFFFFFFFF; 	//自动重装载值，可计数到1.1930464711小时，即是71.582788266分钟
00000a  f04f30ff          MOV      r0,#0xffffffff
00000e  9001              STR      r0,[sp,#4]
;;;11     	TIM_TimeBaseInitStructure.TIM_Prescaler= 84-1;  //分出 1M 的时钟 保证每个周期为1us
000010  2053              MOVS     r0,#0x53
000012  f8ad0000          STRH     r0,[sp,#0]
;;;12     	TIM_TimeBaseInitStructure.TIM_CounterMode=TIM_CounterMode_Up; //向上计数模式
000016  2000              MOVS     r0,#0
000018  f8ad0002          STRH     r0,[sp,#2]
;;;13     	TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1;
00001c  f8ad0008          STRH     r0,[sp,#8]
;;;14     	TIM_TimeBaseInit(TIM5,&TIM_TimeBaseInitStructure);//初始化TIM5
000020  4669              MOV      r1,sp
000022  4804              LDR      r0,|L1.52|
000024  f7fffffe          BL       TIM_TimeBaseInit
;;;15     	TIM_Cmd(TIM5,ENABLE); //使能定时器3
000028  2101              MOVS     r1,#1
00002a  4802              LDR      r0,|L1.52|
00002c  f7fffffe          BL       TIM_Cmd
;;;16     }
000030  bd0e              POP      {r1-r3,pc}
;;;17     
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      0x40000c00

                          AREA ||i.RunTime1||, CODE, READONLY, ALIGN=2

                  RunTime1 PROC
;;;21     //用来测RunTime(StartCheck)和RunTime(StopCheck)间的运行时间，单位为1us
;;;22     u32 RunTime1(unsigned char flag)
000000  4601              MOV      r1,r0
;;;23     {
;;;24     	static u32 last_time = 0,now_time = 0;
;;;25     	u32 dt;
;;;26     
;;;27     	if(flag == StartCheck)
000002  2901              CMP      r1,#1
000004  d104              BNE      |L2.16|
;;;28     		last_time = micros(); //读取系统时间
000006  4a0f              LDR      r2,|L2.68|
000008  6812              LDR      r2,[r2,#0]
00000a  4b0f              LDR      r3,|L2.72|
00000c  601a              STR      r2,[r3,#0]  ; last_time
00000e  e017              B        |L2.64|
                  |L2.16|
;;;29     	else if(flag == StopCheck)
000010  b9b1              CBNZ     r1,|L2.64|
;;;30     	{
;;;31     		now_time = micros(); //读取系统时间
000012  4a0c              LDR      r2,|L2.68|
000014  6812              LDR      r2,[r2,#0]
000016  4b0d              LDR      r3,|L2.76|
000018  601a              STR      r2,[r3,#0]  ; now_time
;;;32     		if(now_time < last_time)
00001a  461a              MOV      r2,r3
00001c  6812              LDR      r2,[r2,#0]  ; now_time
00001e  4b0a              LDR      r3,|L2.72|
000020  681b              LDR      r3,[r3,#0]  ; last_time
000022  429a              CMP      r2,r3
000024  d207              BCS      |L2.54|
;;;33     		{
;;;34     			dt = (now_time + (0xFFFFFFFF - last_time) );
000026  4a08              LDR      r2,|L2.72|
000028  6812              LDR      r2,[r2,#0]  ; last_time
00002a  f1c232ff          RSB      r2,r2,#0xffffffff
00002e  4b07              LDR      r3,|L2.76|
000030  681b              LDR      r3,[r3,#0]  ; now_time
000032  18d0              ADDS     r0,r2,r3
000034  e004              B        |L2.64|
                  |L2.54|
;;;35     		}
;;;36     		else
;;;37     		{
;;;38     			dt = (now_time - last_time);
000036  4a05              LDR      r2,|L2.76|
000038  6812              LDR      r2,[r2,#0]  ; now_time
00003a  4b03              LDR      r3,|L2.72|
00003c  681b              LDR      r3,[r3,#0]  ; last_time
00003e  1ad0              SUBS     r0,r2,r3
                  |L2.64|
;;;39     
;;;40     		}
;;;41     //		printf("%d\r\n", dt);
;;;42     	}
;;;43         return(dt);
;;;44     }
000040  4770              BX       lr
;;;45     u32 RunTime2(unsigned char flag)
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      0x40000c24
                  |L2.72|
                          DCD      last_time
                  |L2.76|
                          DCD      now_time

                          AREA ||i.RunTime2||, CODE, READONLY, ALIGN=2

                  RunTime2 PROC
;;;44     }
;;;45     u32 RunTime2(unsigned char flag)
000000  4601              MOV      r1,r0
;;;46     {
;;;47     	static u32 last_time = 0,now_time = 0;
;;;48     	u32 dt;
;;;49     
;;;50     	if(flag == StartCheck)
000002  2901              CMP      r1,#1
000004  d104              BNE      |L3.16|
;;;51     		last_time = micros(); //读取系统时间
000006  4a0f              LDR      r2,|L3.68|
000008  6812              LDR      r2,[r2,#0]
00000a  4b0f              LDR      r3,|L3.72|
00000c  601a              STR      r2,[r3,#0]  ; last_time
00000e  e017              B        |L3.64|
                  |L3.16|
;;;52     	else if(flag == StopCheck)
000010  b9b1              CBNZ     r1,|L3.64|
;;;53     	{
;;;54     		now_time = micros(); //读取系统时间
000012  4a0c              LDR      r2,|L3.68|
000014  6812              LDR      r2,[r2,#0]
000016  4b0d              LDR      r3,|L3.76|
000018  601a              STR      r2,[r3,#0]  ; now_time
;;;55     		if(now_time < last_time)
00001a  461a              MOV      r2,r3
00001c  6812              LDR      r2,[r2,#0]  ; now_time
00001e  4b0a              LDR      r3,|L3.72|
000020  681b              LDR      r3,[r3,#0]  ; last_time
000022  429a              CMP      r2,r3
000024  d207              BCS      |L3.54|
;;;56     		{
;;;57     			dt = (now_time + (0xFFFFFFFF - last_time) );
000026  4a08              LDR      r2,|L3.72|
000028  6812              LDR      r2,[r2,#0]  ; last_time
00002a  f1c232ff          RSB      r2,r2,#0xffffffff
00002e  4b07              LDR      r3,|L3.76|
000030  681b              LDR      r3,[r3,#0]  ; now_time
000032  18d0              ADDS     r0,r2,r3
000034  e004              B        |L3.64|
                  |L3.54|
;;;58     		}
;;;59     		else
;;;60     		{
;;;61     			dt = (now_time - last_time);
000036  4a05              LDR      r2,|L3.76|
000038  6812              LDR      r2,[r2,#0]  ; now_time
00003a  4b03              LDR      r3,|L3.72|
00003c  681b              LDR      r3,[r3,#0]  ; last_time
00003e  1ad0              SUBS     r0,r2,r3
                  |L3.64|
;;;62     
;;;63     		}
;;;64     //		printf("%d\r\n", dt);
;;;65     	}
;;;66         return(dt);
;;;67     }
000040  4770              BX       lr
;;;68     
                          ENDP

000042  0000              DCW      0x0000
                  |L3.68|
                          DCD      0x40000c24
                  |L3.72|
                          DCD      |symbol_number.21|
                  |L3.76|
                          DCD      |symbol_number.22|

                          AREA ||i.delay_ms_nos||, CODE, READONLY, ALIGN=2

                  delay_ms_nos PROC
;;;68     
;;;69     void delay_ms_nos(uint32_t cnt)
000000  4a06              LDR      r2,|L4.28|
;;;70     {
;;;71     	u32 temp = cnt * 1000 + micros();
000002  6812              LDR      r2,[r2,#0]
000004  eb000340          ADD      r3,r0,r0,LSL #1
000008  ebc313c0          RSB      r3,r3,r0,LSL #7
00000c  eb0201c3          ADD      r1,r2,r3,LSL #3
;;;72     	while(temp >= micros());
000010  bf00              NOP      
                  |L4.18|
000012  4a02              LDR      r2,|L4.28|
000014  6812              LDR      r2,[r2,#0]
000016  428a              CMP      r2,r1
000018  d9fb              BLS      |L4.18|
;;;73     }
00001a  4770              BX       lr
;;;74     
                          ENDP

                  |L4.28|
                          DCD      0x40000c24

                          AREA ||i.delay_us_nos||, CODE, READONLY, ALIGN=2

                  delay_us_nos PROC
;;;74     
;;;75     void delay_us_nos(uint32_t cnt)
000000  4a04              LDR      r2,|L5.20|
;;;76     {
;;;77     	u32 temp = cnt  + micros();
000002  6812              LDR      r2,[r2,#0]
000004  1811              ADDS     r1,r2,r0
;;;78     
;;;79     	while(temp >= micros());
000006  bf00              NOP      
                  |L5.8|
000008  4a02              LDR      r2,|L5.20|
00000a  6812              LDR      r2,[r2,#0]
00000c  428a              CMP      r2,r1
00000e  d9fb              BLS      |L5.8|
;;;80     }
000010  4770              BX       lr
;;;81     
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40000c24

                          AREA ||.data||, DATA, ALIGN=2

                  last_time
                          DCD      0x00000000
                  now_time
                          DCD      0x00000000
                  |symbol_number.21|
                          DCD      0x00000000
                  |symbol_number.22|
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\MySrc\\SystemTimer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_SystemTimer_c_3e03f5c5____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_SystemTimer_c_3e03f5c5____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_SystemTimer_c_3e03f5c5____REVSH|
#line 144
|__asm___13_SystemTimer_c_3e03f5c5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_SystemTimer_c_3e03f5c5____RRX|
#line 300
|__asm___13_SystemTimer_c_3e03f5c5____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
