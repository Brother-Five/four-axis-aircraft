; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\flash\obj\pwm.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\pwm.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\flash\obj\pwm.crf ..\..\MySrc\pwm.cpp]
                          THUMB

                          AREA ||i.Duoji_Close||, CODE, READONLY, ALIGN=1

                  Duoji_Close PROC
;;;208    
;;;209    void Duoji_Close(void)
000000  4770              BX       lr
;;;210    {
;;;211    //	PWM1=DUOJI_CLOSE;
;;;212    //	PWM2=DUOJI_CLOSE;
;;;213    //	PWM3=DUOJI_CLOSE;
;;;214    //	PWM4=DUOJI_CLOSE;
;;;215    }
;;;216    
                          ENDP


                          AREA ||i.Duoji_Open||, CODE, READONLY, ALIGN=1

                  Duoji_Open PROC
;;;199    extern const u16 DUOJI_OPEN,DUOJI_CLOSE;
;;;200    void Duoji_Open(void)
000000  4770              BX       lr
;;;201    {
;;;202    
;;;203    //	PWM1=DUOJI_OPEN;
;;;204    //	PWM2=DUOJI_OPEN;
;;;205    //	PWM3=DUOJI_OPEN;
;;;206    //	PWM4=DUOJI_OPEN;
;;;207    }
;;;208    
                          ENDP


                          AREA ||i.Duoji_Toggle||, CODE, READONLY, ALIGN=2

                  Duoji_Toggle PROC
;;;216    
;;;217    void Duoji_Toggle(void)
000000  b500              PUSH     {lr}
;;;218    {
;;;219        static u8 flag=1;
;;;220        if(flag == 0)
000002  480c              LDR      r0,|L3.52|
000004  7800              LDRB     r0,[r0,#0]  ; flag
000006  b950              CBNZ     r0,|L3.30|
;;;221        {
;;;222            Duoji_Open();
000008  f7fffffe          BL       Duoji_Open
;;;223            flag = !flag;
00000c  4809              LDR      r0,|L3.52|
00000e  7800              LDRB     r0,[r0,#0]  ; flag
000010  b908              CBNZ     r0,|L3.22|
000012  2001              MOVS     r0,#1
000014  e000              B        |L3.24|
                  |L3.22|
000016  2000              MOVS     r0,#0
                  |L3.24|
000018  4906              LDR      r1,|L3.52|
00001a  7008              STRB     r0,[r1,#0]
00001c  e009              B        |L3.50|
                  |L3.30|
;;;224        }
;;;225        else
;;;226        {
;;;227            Duoji_Close();
00001e  f7fffffe          BL       Duoji_Close
;;;228            flag = !flag;
000022  4804              LDR      r0,|L3.52|
000024  7800              LDRB     r0,[r0,#0]  ; flag
000026  b908              CBNZ     r0,|L3.44|
000028  2001              MOVS     r0,#1
00002a  e000              B        |L3.46|
                  |L3.44|
00002c  2000              MOVS     r0,#0
                  |L3.46|
00002e  4901              LDR      r1,|L3.52|
000030  7008              STRB     r0,[r1,#0]
                  |L3.50|
;;;229        }
;;;230    }
000032  bd00              POP      {pc}
                          ENDP

                  |L3.52|
                          DCD      flag

                          AREA ||i.ESC_Init||, CODE, READONLY, ALIGN=1

                  ESC_Init PROC
;;;124    }
;;;125    void ESC_Init(void)
000000  4770              BX       lr
;;;126    {
;;;127    //	PWM1=2000;//先给最高油门以让电调知道量程
;;;128    //	PWM2=2000;
;;;129    //	PWM3=2000;
;;;130    //	PWM4=2000;
;;;131    //	delay_ms(3000);
;;;132    //	PWM1=1000;//最低油门
;;;133    //	PWM2=1000;
;;;134    //	PWM3=1000;
;;;135    //	PWM4=1000;
;;;136    //	delay_ms(3000);
;;;137    ////	u1_printf("111\r\n");
;;;138    }
;;;139    void ESC_RUN(u8 pwm1,u8 pwm2)
                          ENDP


                          AREA ||i.ESC_Init0||, CODE, READONLY, ALIGN=1

                  ESC_Init0 PROC
;;;115     }
;;;116    void ESC_Init0(void)
000000  4770              BX       lr
;;;117    {
;;;118    //	PWM1=1000;
;;;119    //	PWM2=1000;
;;;120    //	PWM3=1000;
;;;121    //	PWM4=1000;
;;;122    //	
;;;123    //	u1_printf("222\r\n");
;;;124    }
;;;125    void ESC_Init(void)
                          ENDP


                          AREA ||i.ESC_RUN||, CODE, READONLY, ALIGN=1

                  ESC_RUN PROC
;;;138    }
;;;139    void ESC_RUN(u8 pwm1,u8 pwm2)
000000  4770              BX       lr
;;;140    {
;;;141    //	PWM1=1000+10*pwm1;
;;;142    //	PWM2=1000+10*pwm2;
;;;143    // 	PWM3=1000+10*pwm3;
;;;144    // 	PWM4=1000+10*pwm4;
;;;145    }
;;;146    
                          ENDP


                          AREA ||i.ESC_RUN1||, CODE, READONLY, ALIGN=1

                  ESC_RUN1 PROC
;;;146    
;;;147    void ESC_RUN1(u8 pwm1,u8 pwm2,u8 pwm3,u8 pwm4)
000000  4770              BX       lr
;;;148    {
;;;149    //	PWM1=1000+10*pwm1;
;;;150    //	PWM2=1000+10*pwm2;
;;;151    // 	PWM3=1000+10*pwm3;
;;;152    // 	PWM4=1000+10*pwm4;
;;;153    //	u1_printf("123\r\n");
;;;154    }
;;;155    
                          ENDP


                          AREA ||i.ESC_STOP||, CODE, READONLY, ALIGN=1

                  ESC_STOP PROC
;;;155    
;;;156    void ESC_STOP(void)
000000  4770              BX       lr
;;;157    {
;;;158    //	PWM1=1000;//最低油门
;;;159    //	PWM2=1000;
;;;160    // 	PWM3=1000;
;;;161    // 	PWM4=1000;
;;;162    //	Set_ESC_Flag(0);
;;;163    //	Laser_Off();
;;;164    }
;;;165    
                          ENDP


                          AREA ||i.ESC_Toggle||, CODE, READONLY, ALIGN=2

                  ESC_Toggle PROC
;;;167    extern u8 ESC_PWM1,ESC_PWM2;
;;;168    void ESC_Toggle(void)
000000  b510              PUSH     {r4,lr}
;;;169    {
;;;170    
;;;171    	ESC_Flag = !ESC_Flag;
000002  480b              LDR      r0,|L9.48|
000004  7800              LDRB     r0,[r0,#0]  ; ESC_Flag
000006  b908              CBNZ     r0,|L9.12|
000008  2001              MOVS     r0,#1
00000a  e000              B        |L9.14|
                  |L9.12|
00000c  2000              MOVS     r0,#0
                  |L9.14|
00000e  4908              LDR      r1,|L9.48|
000010  7008              STRB     r0,[r1,#0]
;;;172        if(ESC_Flag == 1)
000012  4608              MOV      r0,r1
000014  7800              LDRB     r0,[r0,#0]  ; ESC_Flag
000016  2801              CMP      r0,#1
000018  d103              BNE      |L9.34|
;;;173        {
;;;174    //        ESC_RUN(ESC_PWM1,ESC_PWM2);
;;;175            Laser_On();
00001a  2003              MOVS     r0,#3
00001c  f7fffffe          BL       bsp_LedOff
000020  e004              B        |L9.44|
                  |L9.34|
;;;176            
;;;177        }
;;;178        else
;;;179        {
;;;180            ESC_STOP();
000022  f7fffffe          BL       ESC_STOP
;;;181            Laser_Off();
000026  2003              MOVS     r0,#3
000028  f7fffffe          BL       bsp_LedOn
                  |L9.44|
;;;182    	}
;;;183    }
00002c  bd10              POP      {r4,pc}
;;;184    void ESC_Open(void)
                          ENDP

00002e  0000              DCW      0x0000
                  |L9.48|
                          DCD      ESC_Flag

                          AREA ||i.Get_ESC_Flag||, CODE, READONLY, ALIGN=2

                  Get_ESC_Flag PROC
;;;188    }
;;;189    u8 Get_ESC_Flag(void)
000000  4801              LDR      r0,|L10.8|
;;;190    {
;;;191        return ESC_Flag;
000002  7800              LDRB     r0,[r0,#0]  ; ESC_Flag
;;;192    }
000004  4770              BX       lr
;;;193    u8 Set_ESC_Flag(u8 flag)
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      ESC_Flag

                          AREA ||i.Set_ESC_Flag||, CODE, READONLY, ALIGN=2

                  Set_ESC_Flag PROC
;;;192    }
;;;193    u8 Set_ESC_Flag(u8 flag)
000000  4601              MOV      r1,r0
;;;194    {
;;;195        ESC_Flag = flag;
000002  4802              LDR      r0,|L11.12|
000004  7001              STRB     r1,[r0,#0]
;;;196    	return 0;
000006  2000              MOVS     r0,#0
;;;197    }
000008  4770              BX       lr
;;;198    
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      ESC_Flag

                          AREA ||i.TIM2_PWM_Configuration||, CODE, READONLY, ALIGN=2

                  TIM2_PWM_Configuration PROC
;;;6      #define Laser_Off() bsp_LedOn(3)
;;;7      void TIM2_PWM_Configuration(void)
000000  b500              PUSH     {lr}
;;;8      {
000002  b08b              SUB      sp,sp,#0x2c
;;;9          GPIO_InitTypeDef          gpio;
;;;10         TIM_TimeBaseInitTypeDef   tim;
;;;11         TIM_OCInitTypeDef         oc;
;;;12     
;;;13         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB,ENABLE);//打开时钟
000004  2101              MOVS     r1,#1
000006  2003              MOVS     r0,#3
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;14         RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;15     	//GPIO 初始化
;;;16         gpio.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_11;//PB3 PB11
000014  f6400008          MOV      r0,#0x808
000018  9009              STR      r0,[sp,#0x24]
;;;17         gpio.GPIO_Mode = GPIO_Mode_AF;
00001a  2002              MOVS     r0,#2
00001c  f88d0028          STRB     r0,[sp,#0x28]
;;;18         gpio.GPIO_Speed = GPIO_Speed_100MHz;
000020  2003              MOVS     r0,#3
000022  f88d0029          STRB     r0,[sp,#0x29]
;;;19         GPIO_Init(GPIOB,&gpio);
000026  a909              ADD      r1,sp,#0x24
000028  4837              LDR      r0,|L12.264|
00002a  f7fffffe          BL       GPIO_Init
;;;20     
;;;21         gpio.GPIO_Pin = GPIO_Pin_15|GPIO_Pin_2;//PA2 PA15
00002e  f2480004          MOV      r0,#0x8004
000032  9009              STR      r0,[sp,#0x24]
;;;22         gpio.GPIO_Mode = GPIO_Mode_AF;
000034  2002              MOVS     r0,#2
000036  f88d0028          STRB     r0,[sp,#0x28]
;;;23         gpio.GPIO_Speed = GPIO_Speed_100MHz;
00003a  2003              MOVS     r0,#3
00003c  f88d0029          STRB     r0,[sp,#0x29]
;;;24         GPIO_Init(GPIOA,&gpio);
000040  a909              ADD      r1,sp,#0x24
000042  4832              LDR      r0,|L12.268|
000044  f7fffffe          BL       GPIO_Init
;;;25     
;;;26         GPIO_PinAFConfig(GPIOB,GPIO_PinSource3, GPIO_AF_TIM2);//开启复用
000048  2201              MOVS     r2,#1
00004a  2103              MOVS     r1,#3
00004c  482e              LDR      r0,|L12.264|
00004e  f7fffffe          BL       GPIO_PinAFConfig
;;;27         GPIO_PinAFConfig(GPIOA,GPIO_PinSource15,GPIO_AF_TIM2);
000052  2201              MOVS     r2,#1
000054  210f              MOVS     r1,#0xf
000056  482d              LDR      r0,|L12.268|
000058  f7fffffe          BL       GPIO_PinAFConfig
;;;28     	GPIO_PinAFConfig(GPIOB,GPIO_PinSource11, GPIO_AF_TIM2);
00005c  2201              MOVS     r2,#1
00005e  210b              MOVS     r1,#0xb
000060  4829              LDR      r0,|L12.264|
000062  f7fffffe          BL       GPIO_PinAFConfig
;;;29         GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_TIM2);
000066  2201              MOVS     r2,#1
000068  2102              MOVS     r1,#2
00006a  4828              LDR      r0,|L12.268|
00006c  f7fffffe          BL       GPIO_PinAFConfig
;;;30         //定时器时钟配置
;;;31         tim.TIM_Prescaler = 84-1;//1MHZ
000070  2053              MOVS     r0,#0x53
000072  f8ad0018          STRH     r0,[sp,#0x18]
;;;32         tim.TIM_CounterMode = TIM_CounterMode_Up;
000076  2000              MOVS     r0,#0
000078  f8ad001a          STRH     r0,[sp,#0x1a]
;;;33         tim.TIM_Period = 20000; //20ms
00007c  f6446020          MOV      r0,#0x4e20
000080  9007              STR      r0,[sp,#0x1c]
;;;34         tim.TIM_ClockDivision = TIM_CKD_DIV1;
000082  2000              MOVS     r0,#0
000084  f8ad0020          STRH     r0,[sp,#0x20]
;;;35         TIM_TimeBaseInit(TIM2,&tim);
000088  a906              ADD      r1,sp,#0x18
00008a  f04f4080          MOV      r0,#0x40000000
00008e  f7fffffe          BL       TIM_TimeBaseInit
;;;36     
;;;37         oc.TIM_OCMode = TIM_OCMode_PWM2;
000092  2070              MOVS     r0,#0x70
000094  f8ad0004          STRH     r0,[sp,#4]
;;;38         oc.TIM_OutputState = TIM_OutputState_Enable;//输出使能
000098  2001              MOVS     r0,#1
00009a  f8ad0006          STRH     r0,[sp,#6]
;;;39         oc.TIM_Pulse = 0;
00009e  2000              MOVS     r0,#0
0000a0  9003              STR      r0,[sp,#0xc]
;;;40         oc.TIM_OCPolarity = TIM_OCPolarity_Low;
0000a2  2002              MOVS     r0,#2
0000a4  f8ad0010          STRH     r0,[sp,#0x10]
;;;41     
;;;42         TIM_OC1Init(TIM2,&oc);
0000a8  a901              ADD      r1,sp,#4
0000aa  0740              LSLS     r0,r0,#29
0000ac  f7fffffe          BL       TIM_OC1Init
;;;43         TIM_OC2Init(TIM2,&oc);
0000b0  a901              ADD      r1,sp,#4
0000b2  f04f4080          MOV      r0,#0x40000000
0000b6  f7fffffe          BL       TIM_OC2Init
;;;44     		TIM_OC3Init(TIM2,&oc);
0000ba  a901              ADD      r1,sp,#4
0000bc  f04f4080          MOV      r0,#0x40000000
0000c0  f7fffffe          BL       TIM_OC3Init
;;;45     		TIM_OC4Init(TIM2,&oc);
0000c4  a901              ADD      r1,sp,#4
0000c6  f04f4080          MOV      r0,#0x40000000
0000ca  f7fffffe          BL       TIM_OC4Init
;;;46     
;;;47         TIM_OC1PreloadConfig(TIM2,TIM_OCPreload_Enable);
0000ce  2108              MOVS     r1,#8
0000d0  06c8              LSLS     r0,r1,#27
0000d2  f7fffffe          BL       TIM_OC1PreloadConfig
;;;48         TIM_OC2PreloadConfig(TIM2,TIM_OCPreload_Enable);
0000d6  2108              MOVS     r1,#8
0000d8  06c8              LSLS     r0,r1,#27
0000da  f7fffffe          BL       TIM_OC2PreloadConfig
;;;49     		TIM_OC3PreloadConfig(TIM2,TIM_OCPreload_Enable);
0000de  2108              MOVS     r1,#8
0000e0  06c8              LSLS     r0,r1,#27
0000e2  f7fffffe          BL       TIM_OC3PreloadConfig
;;;50         TIM_OC4PreloadConfig(TIM2,TIM_OCPreload_Enable);
0000e6  2108              MOVS     r1,#8
0000e8  06c8              LSLS     r0,r1,#27
0000ea  f7fffffe          BL       TIM_OC4PreloadConfig
;;;51     
;;;52         TIM_ARRPreloadConfig(TIM2,ENABLE);
0000ee  2101              MOVS     r1,#1
0000f0  0788              LSLS     r0,r1,#30
0000f2  f7fffffe          BL       TIM_ARRPreloadConfig
;;;53     
;;;54         TIM_Cmd(TIM2,ENABLE);
0000f6  2101              MOVS     r1,#1
0000f8  0788              LSLS     r0,r1,#30
0000fa  f7fffffe          BL       TIM_Cmd
;;;55         Laser_Off();
0000fe  2003              MOVS     r0,#3
000100  f7fffffe          BL       bsp_LedOn
;;;56     //	Duoji_Open();
;;;57     //		delay_ms(5000);
;;;58     //	//PWM应该不需要初始化，直接输出
;;;59     //  PWM1=1000;
;;;60     //	PWM2=1000;
;;;61     //	PWM3=1000;
;;;62     //	PWM4=1000;
;;;63     //	delay_ms(5000);
;;;64     //	Duoji_Close();
;;;65     }
000104  b00b              ADD      sp,sp,#0x2c
000106  bd00              POP      {pc}
;;;66     
                          ENDP

                  |L12.264|
                          DCD      0x40020400
                  |L12.268|
                          DCD      0x40020000

                          AREA ||i.TIM3_PWM_Configuration||, CODE, READONLY, ALIGN=2

                  TIM3_PWM_Configuration PROC
;;;66     
;;;67      void TIM3_PWM_Configuration(void)
000000  b500              PUSH     {lr}
;;;68      {
000002  b08b              SUB      sp,sp,#0x2c
;;;69      	GPIO_InitTypeDef          gpio;
;;;70          TIM_TimeBaseInitTypeDef   tim;
;;;71          TIM_OCInitTypeDef         oc;
;;;72     
;;;73          RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC|RCC_AHB1Periph_GPIOB,ENABLE);//打开时钟
000004  2101              MOVS     r1,#1
000006  2006              MOVS     r0,#6
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;74          RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;75      	//GPIO 初始化
;;;76          gpio.GPIO_Pin = GPIO_Pin_4|GPIO_Pin_5;//PB4 PB5
000014  2030              MOVS     r0,#0x30
000016  9009              STR      r0,[sp,#0x24]
;;;77          gpio.GPIO_Mode = GPIO_Mode_AF;
000018  2002              MOVS     r0,#2
00001a  f88d0028          STRB     r0,[sp,#0x28]
;;;78          gpio.GPIO_Speed = GPIO_Speed_100MHz;
00001e  2003              MOVS     r0,#3
000020  f88d0029          STRB     r0,[sp,#0x29]
;;;79          GPIO_Init(GPIOB,&gpio);
000024  a909              ADD      r1,sp,#0x24
000026  4834              LDR      r0,|L13.248|
000028  f7fffffe          BL       GPIO_Init
;;;80     
;;;81          gpio.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9;//PC8 PC9
00002c  f44f7040          MOV      r0,#0x300
000030  9009              STR      r0,[sp,#0x24]
;;;82          gpio.GPIO_Mode = GPIO_Mode_AF;
000032  2002              MOVS     r0,#2
000034  f88d0028          STRB     r0,[sp,#0x28]
;;;83          gpio.GPIO_Speed = GPIO_Speed_100MHz;
000038  2003              MOVS     r0,#3
00003a  f88d0029          STRB     r0,[sp,#0x29]
;;;84          GPIO_Init(GPIOC,&gpio);
00003e  a909              ADD      r1,sp,#0x24
000040  482e              LDR      r0,|L13.252|
000042  f7fffffe          BL       GPIO_Init
;;;85     
;;;86          GPIO_PinAFConfig(GPIOB,GPIO_PinSource4, GPIO_AF_TIM3);//开启复用
000046  2202              MOVS     r2,#2
000048  2104              MOVS     r1,#4
00004a  482b              LDR      r0,|L13.248|
00004c  f7fffffe          BL       GPIO_PinAFConfig
;;;87          GPIO_PinAFConfig(GPIOB,GPIO_PinSource5, GPIO_AF_TIM3);
000050  2202              MOVS     r2,#2
000052  2105              MOVS     r1,#5
000054  4828              LDR      r0,|L13.248|
000056  f7fffffe          BL       GPIO_PinAFConfig
;;;88      	GPIO_PinAFConfig(GPIOC,GPIO_PinSource8, GPIO_AF_TIM3);
00005a  2202              MOVS     r2,#2
00005c  2108              MOVS     r1,#8
00005e  4827              LDR      r0,|L13.252|
000060  f7fffffe          BL       GPIO_PinAFConfig
;;;89          GPIO_PinAFConfig(GPIOC,GPIO_PinSource9, GPIO_AF_TIM3);
000064  2202              MOVS     r2,#2
000066  2109              MOVS     r1,#9
000068  4824              LDR      r0,|L13.252|
00006a  f7fffffe          BL       GPIO_PinAFConfig
;;;90          //定时器时钟配置
;;;91          tim.TIM_Prescaler = 84-1;//1MHZ
00006e  2053              MOVS     r0,#0x53
000070  f8ad0018          STRH     r0,[sp,#0x18]
;;;92          tim.TIM_CounterMode = TIM_CounterMode_Up;
000074  2000              MOVS     r0,#0
000076  f8ad001a          STRH     r0,[sp,#0x1a]
;;;93          tim.TIM_Period = 1000; //20ms
00007a  f44f707a          MOV      r0,#0x3e8
00007e  9007              STR      r0,[sp,#0x1c]
;;;94          tim.TIM_ClockDivision = TIM_CKD_DIV1;
000080  2000              MOVS     r0,#0
000082  f8ad0020          STRH     r0,[sp,#0x20]
;;;95          TIM_TimeBaseInit(TIM3,&tim);
000086  a906              ADD      r1,sp,#0x18
000088  481d              LDR      r0,|L13.256|
00008a  f7fffffe          BL       TIM_TimeBaseInit
;;;96     
;;;97          oc.TIM_OCMode = TIM_OCMode_PWM2;
00008e  2070              MOVS     r0,#0x70
000090  f8ad0004          STRH     r0,[sp,#4]
;;;98          oc.TIM_OutputState = TIM_OutputState_Enable;//输出使能
000094  2001              MOVS     r0,#1
000096  f8ad0006          STRH     r0,[sp,#6]
;;;99          oc.TIM_Pulse = 0;
00009a  2000              MOVS     r0,#0
00009c  9003              STR      r0,[sp,#0xc]
;;;100         oc.TIM_OCPolarity = TIM_OCPolarity_Low;
00009e  2002              MOVS     r0,#2
0000a0  f8ad0010          STRH     r0,[sp,#0x10]
;;;101    
;;;102         TIM_OC1Init(TIM3,&oc);
0000a4  a901              ADD      r1,sp,#4
0000a6  4816              LDR      r0,|L13.256|
0000a8  f7fffffe          BL       TIM_OC1Init
;;;103         TIM_OC2Init(TIM3,&oc);
0000ac  a901              ADD      r1,sp,#4
0000ae  4814              LDR      r0,|L13.256|
0000b0  f7fffffe          BL       TIM_OC2Init
;;;104     	TIM_OC3Init(TIM3,&oc);
0000b4  a901              ADD      r1,sp,#4
0000b6  4812              LDR      r0,|L13.256|
0000b8  f7fffffe          BL       TIM_OC3Init
;;;105     	TIM_OC4Init(TIM3,&oc);
0000bc  a901              ADD      r1,sp,#4
0000be  4810              LDR      r0,|L13.256|
0000c0  f7fffffe          BL       TIM_OC4Init
;;;106    
;;;107         TIM_OC1PreloadConfig(TIM3,TIM_OCPreload_Enable);
0000c4  2108              MOVS     r1,#8
0000c6  480e              LDR      r0,|L13.256|
0000c8  f7fffffe          BL       TIM_OC1PreloadConfig
;;;108         TIM_OC2PreloadConfig(TIM3,TIM_OCPreload_Enable);
0000cc  2108              MOVS     r1,#8
0000ce  480c              LDR      r0,|L13.256|
0000d0  f7fffffe          BL       TIM_OC2PreloadConfig
;;;109     	TIM_OC3PreloadConfig(TIM3,TIM_OCPreload_Enable);
0000d4  2108              MOVS     r1,#8
0000d6  480a              LDR      r0,|L13.256|
0000d8  f7fffffe          BL       TIM_OC3PreloadConfig
;;;110         TIM_OC4PreloadConfig(TIM3,TIM_OCPreload_Enable);
0000dc  2108              MOVS     r1,#8
0000de  4808              LDR      r0,|L13.256|
0000e0  f7fffffe          BL       TIM_OC4PreloadConfig
;;;111    
;;;112         TIM_ARRPreloadConfig(TIM3,ENABLE);
0000e4  2101              MOVS     r1,#1
0000e6  4806              LDR      r0,|L13.256|
0000e8  f7fffffe          BL       TIM_ARRPreloadConfig
;;;113    
;;;114         TIM_Cmd(TIM3,ENABLE);
0000ec  2101              MOVS     r1,#1
0000ee  4804              LDR      r0,|L13.256|
0000f0  f7fffffe          BL       TIM_Cmd
;;;115     }
0000f4  b00b              ADD      sp,sp,#0x2c
0000f6  bd00              POP      {pc}
;;;116    void ESC_Init0(void)
                          ENDP

                  |L13.248|
                          DCD      0x40020400
                  |L13.252|
                          DCD      0x40020800
                  |L13.256|
                          DCD      0x40000400

                          AREA ||i._Z8ESC_Openv||, CODE, READONLY, ALIGN=2

                  _Z8ESC_Openv PROC ; ESC_Open()
;;;183    }
;;;184    void ESC_Open(void)
000000  b510              PUSH     {r4,lr}
;;;185    {
;;;186    	Laser_On();
000002  2003              MOVS     r0,#3
000004  f7fffffe          BL       bsp_LedOff
;;;187    	ESC_Flag = 1;
000008  2001              MOVS     r0,#1
00000a  4901              LDR      r1,|L14.16|
00000c  7008              STRB     r0,[r1,#0]
;;;188    }
00000e  bd10              POP      {r4,pc}
;;;189    u8 Get_ESC_Flag(void)
                          ENDP

                  |L14.16|
                          DCD      ESC_Flag

                          AREA ||.ARM.exidx||, LINKORDER=||i.TIM2_PWM_Configuration||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i.TIM2_PWM_Configuration||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i.TIM3_PWM_Configuration||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.TIM3_PWM_Configuration||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i.ESC_Init0||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.ESC_Init0||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i.ESC_Init||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.ESC_Init||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i.ESC_RUN||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.ESC_RUN||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i.ESC_RUN1||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.ESC_RUN1||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i.ESC_STOP||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.ESC_STOP||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i.ESC_Toggle||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.ESC_Toggle||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._Z8ESC_Openv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8ESC_Openv||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i.Get_ESC_Flag||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.Get_ESC_Flag||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i.Set_ESC_Flag||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.Set_ESC_Flag||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i.Duoji_Open||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.Duoji_Open||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i.Duoji_Close||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.Duoji_Close||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i.Duoji_Toggle||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.Duoji_Toggle||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=0

                  ESC_Flag
000000  00                DCB      0x00
                  flag
000001  01                DCB      0x01

;*** Start embedded assembler ***

#line 1 "..\\..\\MySrc\\pwm.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_pwm_cpp_5847fb19___Z7__REV16j|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_pwm_cpp_5847fb19___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_pwm_cpp_5847fb19___Z7__REVSHi|
#line 144
|__asm___7_pwm_cpp_5847fb19___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_pwm_cpp_5847fb19___Z5__RRXj|
#line 300
|__asm___7_pwm_cpp_5847fb19___Z5__RRXj| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
