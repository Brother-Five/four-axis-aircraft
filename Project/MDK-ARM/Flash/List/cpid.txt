; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\flash\obj\cpid.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\cpid.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\flash\obj\cpid.crf ..\..\MySrc\cpid.cpp]
                          THUMB

                          AREA ||i._Z11PID_InitYAWP3PIDfff||, CODE, READONLY, ALIGN=2

                  _Z11PID_InitYAWP3PIDfff PROC ; PID_InitYAW(PID*, float, float, float)
;;;459    
;;;460    void PID_InitYAW(PID *pid,float pmax,float intmax,float dmax)
000000  eddf1a0f          VLDR     s3,|L1.64|
;;;461    {
;;;462    	pid->error=0;
000004  edc01a00          VSTR     s3,[r0,#0]
;;;463    	pid->lasterror=0;	
000008  eddf1a0d          VLDR     s3,|L1.64|
00000c  edc01a01          VSTR     s3,[r0,#4]
;;;464    	pid->kp=0.0f;//10.0f
000010  eddf1a0b          VLDR     s3,|L1.64|
000014  edc01a03          VSTR     s3,[r0,#0xc]
;;;465    	pid->ki=0.0f;//0.0
000018  eddf1a09          VLDR     s3,|L1.64|
00001c  edc01a04          VSTR     s3,[r0,#0x10]
;;;466    	pid->kd=0.0f;//0.0
000020  eddf1a07          VLDR     s3,|L1.64|
000024  edc01a05          VSTR     s3,[r0,#0x14]
;;;467    //	pid->Pmax=pmax;
;;;468    	pid->Intmax=intmax;//
000028  edc00a06          VSTR     s1,[r0,#0x18]
;;;469    	pid->Intx=0;//
00002c  eddf1a04          VLDR     s3,|L1.64|
000030  edc01a07          VSTR     s3,[r0,#0x1c]
;;;470    //	pid->Dmax=dmax;
;;;471    //	pid->Pcontrol=0;
;;;472    //	pid->Icontrol=0;
;;;473    //	pid->Dcontrol=0;
;;;474    	pid->controutput=0;
000034  eddf1a02          VLDR     s3,|L1.64|
000038  edc01a08          VSTR     s3,[r0,#0x20]
;;;475    //	pid->lastoutput=0;
;;;476    }
00003c  4770              BX       lr
;;;477    
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
000040  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._Z11Rcdata_InitP2RC||, CODE, READONLY, ALIGN=2

                  _Z11Rcdata_InitP2RC PROC ; Rcdata_Init(RC*)
;;;394    
;;;395    void Rcdata_Init(RC *rc)
000000  ed9f0a0b          VLDR     s0,|L2.48|
;;;396    {
;;;397    	rc->pitch=0.0f;
000004  ed800a00          VSTR     s0,[r0,#0]
;;;398    	rc->roll =0.0f;
000008  ed9f0a09          VLDR     s0,|L2.48|
00000c  ed800a01          VSTR     s0,[r0,#4]
;;;399    	rc->yaw  =0.0f;
000010  ed9f0a07          VLDR     s0,|L2.48|
000014  ed800a02          VSTR     s0,[r0,#8]
;;;400    	rc->thottle=0.0f;
000018  ed9f0a05          VLDR     s0,|L2.48|
00001c  ed800a03          VSTR     s0,[r0,#0xc]
;;;401    //	rc->height=0.0f;
;;;402    	
;;;403    	rc->Jindou=FALSE;//
000020  2100              MOVS     r1,#0
000022  7481              STRB     r1,[r0,#0x12]
;;;404    	rc->Lock=FALSE;//
000024  74c1              STRB     r1,[r0,#0x13]
;;;405    	rc->Selft_Test=FALSE;//
000026  7501              STRB     r1,[r0,#0x14]
;;;406    	rc->batvol=TRUE;//
000028  2101              MOVS     r1,#1
00002a  7541              STRB     r1,[r0,#0x15]
;;;407    	
;;;408    }
00002c  4770              BX       lr
;;;409    void Target_parameter_init(TARGET *target)
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
000030  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._Z12PID_InitROLLP3PIDfff||, CODE, READONLY, ALIGN=2

                  _Z12PID_InitROLLP3PIDfff PROC ; PID_InitROLL(PID*, float, float, float)
;;;441    
;;;442    void PID_InitROLL(PID *pid,float pmax,float intmax,float dmax)
000000  eddf1a0f          VLDR     s3,|L3.64|
;;;443    {
;;;444    	pid->error=0;
000004  edc01a00          VSTR     s3,[r0,#0]
;;;445    	pid->lasterror=0;	
000008  eddf1a0d          VLDR     s3,|L3.64|
00000c  edc01a01          VSTR     s3,[r0,#4]
;;;446    	pid->kp=0.5f;//0.1
000010  eef61a00          VMOV.F32 s3,#0.50000000
000014  edc01a03          VSTR     s3,[r0,#0xc]
;;;447    	pid->ki=0.1f;//0.1
000018  eddf1a0a          VLDR     s3,|L3.68|
00001c  edc01a04          VSTR     s3,[r0,#0x10]
;;;448    	pid->kd=0.0f;//0.0
000020  eddf1a07          VLDR     s3,|L3.64|
000024  edc01a05          VSTR     s3,[r0,#0x14]
;;;449    //	pid->Pmax=pmax;
;;;450    	pid->Intmax=intmax;//
000028  edc00a06          VSTR     s1,[r0,#0x18]
;;;451    	pid->Intx=0;//
00002c  eddf1a04          VLDR     s3,|L3.64|
000030  edc01a07          VSTR     s3,[r0,#0x1c]
;;;452    //	pid->Dmax=dmax;
;;;453    //	pid->Pcontrol=0;
;;;454    //	pid->Icontrol=0;
;;;455    //	pid->Dcontrol=0;
;;;456    	pid->controutput=0;
000034  eddf1a02          VLDR     s3,|L3.64|
000038  edc01a08          VSTR     s3,[r0,#0x20]
;;;457    //	pid->lastoutput=0;
;;;458    }
00003c  4770              BX       lr
;;;459    
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
000040  00000000          DCFS     0x00000000 ; 0
                  |L3.68|
000044  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612

                          AREA ||i._Z13PID_InitPITCHP3PIDfff||, CODE, READONLY, ALIGN=2

                  _Z13PID_InitPITCHP3PIDfff PROC ; PID_InitPITCH(PID*, float, float, float)
;;;423    
;;;424    void PID_InitPITCH(PID *pid,float pmax,float intmax,float dmax)
000000  eddf1a0f          VLDR     s3,|L4.64|
;;;425    {
;;;426    	pid->error=0;
000004  edc01a00          VSTR     s3,[r0,#0]
;;;427    	pid->lasterror=0;	
000008  eddf1a0d          VLDR     s3,|L4.64|
00000c  edc01a01          VSTR     s3,[r0,#4]
;;;428    	pid->kp=0.5f;//0.1
000010  eef61a00          VMOV.F32 s3,#0.50000000
000014  edc01a03          VSTR     s3,[r0,#0xc]
;;;429    	pid->ki=0.1f;//0.1
000018  eddf1a0a          VLDR     s3,|L4.68|
00001c  edc01a04          VSTR     s3,[r0,#0x10]
;;;430    	pid->kd=0.0f;//0.0
000020  eddf1a07          VLDR     s3,|L4.64|
000024  edc01a05          VSTR     s3,[r0,#0x14]
;;;431    //	pid->Pmax=pmax;
;;;432    	pid->Intmax=intmax;//
000028  edc00a06          VSTR     s1,[r0,#0x18]
;;;433    	pid->Intx=0;//
00002c  eddf1a04          VLDR     s3,|L4.64|
000030  edc01a07          VSTR     s3,[r0,#0x1c]
;;;434    //	pid->Dmax=dmax;
;;;435    //	pid->Pcontrol=0;
;;;436    //	pid->Icontrol=0;
;;;437    //	pid->Dcontrol=0;
;;;438    	pid->controutput=0;
000034  eddf1a02          VLDR     s3,|L4.64|
000038  edc01a08          VSTR     s3,[r0,#0x20]
;;;439    //	pid->lastoutput=0;
;;;440    }
00003c  4770              BX       lr
;;;441    
                          ENDP

00003e  0000              DCW      0x0000
                  |L4.64|
000040  00000000          DCFS     0x00000000 ; 0
                  |L4.68|
000044  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612

                          AREA ||i._Z15PID_InitYAW_VELP3PIDfff||, CODE, READONLY, ALIGN=2

                  _Z15PID_InitYAW_VELP3PIDfff PROC ; PID_InitYAW_VEL(PID*, float, float, float)
;;;514    
;;;515    void PID_InitYAW_VEL(PID *pid,float pmax,float intmax,float dmax)
000000  eddf1a0f          VLDR     s3,|L5.64|
;;;516    {
;;;517    	pid->error=0;
000004  edc01a00          VSTR     s3,[r0,#0]
;;;518    	pid->lasterror=0;	
000008  eddf1a0d          VLDR     s3,|L5.64|
00000c  edc01a01          VSTR     s3,[r0,#4]
;;;519    	pid->kp=0.0f;//
000010  eddf1a0b          VLDR     s3,|L5.64|
000014  edc01a03          VSTR     s3,[r0,#0xc]
;;;520    	pid->ki=0.0f;
000018  eddf1a09          VLDR     s3,|L5.64|
00001c  edc01a04          VSTR     s3,[r0,#0x10]
;;;521    	pid->kd=0.0f;
000020  eddf1a07          VLDR     s3,|L5.64|
000024  edc01a05          VSTR     s3,[r0,#0x14]
;;;522    //	pid->Pmax=pmax;
;;;523    	pid->Intmax=intmax;//
000028  edc00a06          VSTR     s1,[r0,#0x18]
;;;524    	pid->Intx=0;//
00002c  eddf1a04          VLDR     s3,|L5.64|
000030  edc01a07          VSTR     s3,[r0,#0x1c]
;;;525    //	pid->Dmax=dmax;
;;;526    //	pid->Pcontrol=0;
;;;527    //	pid->Icontrol=0;
;;;528    //	pid->Dcontrol=0;
;;;529    	pid->controutput=0;
000034  eddf1a02          VLDR     s3,|L5.64|
000038  edc01a08          VSTR     s3,[r0,#0x20]
;;;530    //	pid->lastoutput=0;
;;;531    }
00003c  4770              BX       lr
;;;532    /**********************Ë«»·PID**************************/
                          ENDP

00003e  0000              DCW      0x0000
                  |L5.64|
000040  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._Z16ControlTask_Initv||, CODE, READONLY, ALIGN=2

                  _Z16ControlTask_Initv PROC ; ControlTask_Init()
;;;380    PID Gyropitchpid,Gyrorollpid,Gyroyawpid;
;;;381    void ControlTask_Init(void)
000000  b500              PUSH     {lr}
;;;382    {
;;;383    		Rcdata_Init(&Rcdata);//
000002  481e              LDR      r0,|L6.124|
000004  f7fffffe          BL       _Z11Rcdata_InitP2RC ; Rcdata_Init(RC*)
;;;384        PID_InitPITCH(&Pitchpid, PMAX,INTMAX, DMAX);//
000008  ed9f1a1d          VLDR     s2,|L6.128|
00000c  eddf0a1d          VLDR     s1,|L6.132|
000010  ed9f0a1b          VLDR     s0,|L6.128|
000014  481c              LDR      r0,|L6.136|
000016  f7fffffe          BL       _Z13PID_InitPITCHP3PIDfff ; PID_InitPITCH(PID*, float, float, float)
;;;385        PID_InitROLL(&Rollpid,  PMAX,INTMAX, DMAX);//
00001a  ed9f1a19          VLDR     s2,|L6.128|
00001e  eddf0a19          VLDR     s1,|L6.132|
000022  ed9f0a17          VLDR     s0,|L6.128|
000026  4819              LDR      r0,|L6.140|
000028  f7fffffe          BL       _Z12PID_InitROLLP3PIDfff ; PID_InitROLL(PID*, float, float, float)
;;;386        PID_InitYAW (&Yawpid,   PMAX,INTMAX, DMAX);//PID
00002c  ed9f1a14          VLDR     s2,|L6.128|
000030  eddf0a14          VLDR     s1,|L6.132|
000034  ed9f0a12          VLDR     s0,|L6.128|
000038  4815              LDR      r0,|L6.144|
00003a  f7fffffe          BL       _Z11PID_InitYAWP3PIDfff ; PID_InitYAW(PID*, float, float, float)
;;;387    	
;;;388    	PID_InitPITCH_VEL(&Gyropitchpid,PMAX,INTMAX,DMAX);//PID
00003e  ed9f1a10          VLDR     s2,|L6.128|
000042  eddf0a10          VLDR     s1,|L6.132|
000046  ed9f0a0e          VLDR     s0,|L6.128|
00004a  4812              LDR      r0,|L6.148|
00004c  f7fffffe          BL       _Z17PID_InitPITCH_VELP3PIDfff ; PID_InitPITCH_VEL(PID*, float, float, float)
;;;389    	PID_InitROLL_VEL(&Gyrorollpid, PMAX,INTMAX,DMAX);
000050  ed9f1a0b          VLDR     s2,|L6.128|
000054  eddf0a0b          VLDR     s1,|L6.132|
000058  ed9f0a09          VLDR     s0,|L6.128|
00005c  480e              LDR      r0,|L6.152|
00005e  f7fffffe          BL       _Z16PID_InitROLL_VELP3PIDfff ; PID_InitROLL_VEL(PID*, float, float, float)
;;;390    	PID_InitYAW_VEL	(&Gyroyawpid,  PMAX,INTMAX,DMAX);	
000062  ed9f1a07          VLDR     s2,|L6.128|
000066  eddf0a07          VLDR     s1,|L6.132|
00006a  ed9f0a05          VLDR     s0,|L6.128|
00006e  480b              LDR      r0,|L6.156|
000070  f7fffffe          BL       _Z15PID_InitYAW_VELP3PIDfff ; PID_InitYAW_VEL(PID*, float, float, float)
;;;391    	
;;;392    	Target_parameter_init(&Target);
000074  480a              LDR      r0,|L6.160|
000076  f7fffffe          BL       _Z21Target_parameter_initP6TARGET ; Target_parameter_init(TARGET*)
;;;393    }
00007a  bd00              POP      {pc}
;;;394    
                          ENDP

                  |L6.124|
                          DCD      Rcdata
                  |L6.128|
000080  44e10000          DCFS     0x44e10000 ; 1800
                  |L6.132|
000084  43960000          DCFS     0x43960000 ; 300
                  |L6.136|
                          DCD      Pitchpid
                  |L6.140|
                          DCD      Rollpid
                  |L6.144|
                          DCD      Yawpid
                  |L6.148|
                          DCD      Gyropitchpid
                  |L6.152|
                          DCD      Gyrorollpid
                  |L6.156|
                          DCD      Gyroyawpid
                  |L6.160|
                          DCD      Target

                          AREA ||i._Z16PID_InitROLL_VELP3PIDfff||, CODE, READONLY, ALIGN=2

                  _Z16PID_InitROLL_VELP3PIDfff PROC ; PID_InitROLL_VEL(PID*, float, float, float)
;;;495    
;;;496    void PID_InitROLL_VEL(PID *pid,float pmax,float intmax,float dmax)
000000  eddf1a0f          VLDR     s3,|L7.64|
;;;497    {
;;;498    	pid->error=0;
000004  edc01a00          VSTR     s3,[r0,#0]
;;;499    	pid->lasterror=0;	
000008  eddf1a0d          VLDR     s3,|L7.64|
00000c  edc01a01          VSTR     s3,[r0,#4]
;;;500    	pid->kp=1.0f;//1.5
000010  eef71a00          VMOV.F32 s3,#1.00000000
000014  edc01a03          VSTR     s3,[r0,#0xc]
;;;501    	pid->ki=0.0f;
000018  eddf1a09          VLDR     s3,|L7.64|
00001c  edc01a04          VSTR     s3,[r0,#0x10]
;;;502    	pid->kd=4.0f;//4.0
000020  eef11a00          VMOV.F32 s3,#4.00000000
000024  edc01a05          VSTR     s3,[r0,#0x14]
;;;503    //	pid->Pmax=pmax;
;;;504    	pid->Intmax=intmax;//
000028  edc00a06          VSTR     s1,[r0,#0x18]
;;;505    	pid->Intx=0;//
00002c  eddf1a04          VLDR     s3,|L7.64|
000030  edc01a07          VSTR     s3,[r0,#0x1c]
;;;506    //	pid->Dmax=dmax;
;;;507    //	pid->Pcontrol=0;
;;;508    //	pid->Icontrol=0;
;;;509    //	pid->Dcontrol=0;
;;;510    	pid->controutput=0;
000034  eddf1a02          VLDR     s3,|L7.64|
000038  edc01a08          VSTR     s3,[r0,#0x20]
;;;511    //	pid->lastoutput=0;
;;;512    }
00003c  4770              BX       lr
;;;513    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
000040  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._Z17PID_InitPITCH_VELP3PIDfff||, CODE, READONLY, ALIGN=2

                  _Z17PID_InitPITCH_VELP3PIDfff PROC ; PID_InitPITCH_VEL(PID*, float, float, float)
;;;477    
;;;478    void PID_InitPITCH_VEL(PID *pid,float pmax,float intmax,float dmax)
000000  eddf1a0f          VLDR     s3,|L8.64|
;;;479    {
;;;480    	pid->error=0;
000004  edc01a00          VSTR     s3,[r0,#0]
;;;481    	pid->lasterror=0;	
000008  eddf1a0d          VLDR     s3,|L8.64|
00000c  edc01a01          VSTR     s3,[r0,#4]
;;;482    	pid->kp=1.0f;//1.5
000010  eef71a00          VMOV.F32 s3,#1.00000000
000014  edc01a03          VSTR     s3,[r0,#0xc]
;;;483    	pid->ki=0.0f;
000018  eddf1a09          VLDR     s3,|L8.64|
00001c  edc01a04          VSTR     s3,[r0,#0x10]
;;;484    	pid->kd=4.0f;//4.1
000020  eef11a00          VMOV.F32 s3,#4.00000000
000024  edc01a05          VSTR     s3,[r0,#0x14]
;;;485    //	pid->Pmax=pmax;
;;;486    	pid->Intmax=intmax;//
000028  edc00a06          VSTR     s1,[r0,#0x18]
;;;487    	pid->Intx=0;//»ý·ÖÏî
00002c  eddf1a04          VLDR     s3,|L8.64|
000030  edc01a07          VSTR     s3,[r0,#0x1c]
;;;488    //	pid->Dmax=dmax;
;;;489    //	pid->Pcontrol=0;
;;;490    //	pid->Icontrol=0;
;;;491    //	pid->Dcontrol=0;
;;;492    	pid->controutput=0;
000034  eddf1a02          VLDR     s3,|L8.64|
000038  edc01a08          VSTR     s3,[r0,#0x20]
;;;493    //	pid->lastoutput=0;
;;;494    }
00003c  4770              BX       lr
;;;495    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
000040  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._Z21Target_parameter_initP6TARGET||, CODE, READONLY, ALIGN=2

                  _Z21Target_parameter_initP6TARGET PROC ; Target_parameter_init(TARGET*)
;;;408    }
;;;409    void Target_parameter_init(TARGET *target)
000000  ed9f0a0c          VLDR     s0,|L9.52|
;;;410    {
;;;411    	target->pitch=0.0f;
000004  ed800a00          VSTR     s0,[r0,#0]
;;;412    	target->roll=0.0f;
000008  ed9f0a0a          VLDR     s0,|L9.52|
00000c  ed800a01          VSTR     s0,[r0,#4]
;;;413    	target->yaw=0.0f;
000010  ed9f0a08          VLDR     s0,|L9.52|
000014  ed800a02          VSTR     s0,[r0,#8]
;;;414    	target->thottle=0.0f;
000018  ed9f0a06          VLDR     s0,|L9.52|
00001c  ed800a03          VSTR     s0,[r0,#0xc]
;;;415    //	target->height=0.0f;
;;;416    	
;;;417    	target->Jindou=0;
000020  2100              MOVS     r1,#0
000022  7481              STRB     r1,[r0,#0x12]
;;;418    	target->Lock=1;//
000024  2101              MOVS     r1,#1
000026  74c1              STRB     r1,[r0,#0x13]
;;;419    	target->Selft_Test=0;//
000028  2100              MOVS     r1,#0
00002a  7501              STRB     r1,[r0,#0x14]
;;;420    	target->batvol=0;
00002c  7541              STRB     r1,[r0,#0x15]
;;;421    	target->signal=GETSIGNAL;//
00002e  7581              STRB     r1,[r0,#0x16]
;;;422    }
000030  4770              BX       lr
;;;423    
                          ENDP

000032  0000              DCW      0x0000
                  |L9.52|
000034  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._Z23Pidcontrol_Altitude_VELP6TARGETP5EULLAP11Data_To_ImuPff||, CODE, READONLY, ALIGN=2

                  _Z23Pidcontrol_Altitude_VELP6TARGETP5EULLAP11Data_To_ImuPff PROC ; Pidcontrol_Altitude_VEL(TARGET*, EULLA*, Data_To_Imu*, float*, float)
;;;532    /**********************Ë«»·PID**************************/
;;;533    void Pidcontrol_Altitude_VEL(TARGET *TARGET,EULLA *cureulla,Data_To_Imu*velocity,float ctrout[],float dt)
000000  b510              PUSH     {r4,lr}
;;;534    {		
;;;535    /***************************Íâ»·error************************************/
;;;536    		Pitchpid.error=TARGET->pitch -cureulla->pitch;
000002  edd00a00          VLDR     s1,[r0,#0]
000006  ed911a00          VLDR     s2,[r1,#0]
00000a  ee700ac1          VSUB.F32 s1,s1,s2
00000e  4cab              LDR      r4,|L10.700|
000010  edc40a00          VSTR     s1,[r4,#0]
;;;537    		Rollpid.error =TARGET->roll  -cureulla->roll;
000014  edd00a01          VLDR     s1,[r0,#4]
000018  ed911a01          VLDR     s2,[r1,#4]
00001c  ee700ac1          VSUB.F32 s1,s1,s2
000020  4ca7              LDR      r4,|L10.704|
000022  edc40a00          VSTR     s1,[r4,#0]
;;;538    		Yawpid.error  =TARGET->yaw  -cureulla->yaw;//
000026  edd00a02          VLDR     s1,[r0,#8]
00002a  ed911a02          VLDR     s2,[r1,#8]
00002e  ee700ac1          VSUB.F32 s1,s1,s2
000032  4ca4              LDR      r4,|L10.708|
000034  edc40a00          VSTR     s1,[r4,#0]
;;;539    //		u1_printf("%7.3f\t%7.3f\t%7.3f\r\n",Pitchpid.error,Rollpid.error,Yawpid.error );
;;;540    //		Yawpid.error  =TARGET->yaw  -velocity->Z*Radian_to_Angle;//½ÇËÙ¶È
;;;541    /***********************integer and limit**********************************/	
;;;542    //		Pitchpid.Intx=Pitchpid.error-2*Pitchpid.lasterror+Pitchpid.lasterror2;
;;;543    	Pitchpid.Intx+=Pitchpid.error*dt;
000038  4ca0              LDR      r4,|L10.700|
00003a  edd40a07          VLDR     s1,[r4,#0x1c]
00003e  ed941a00          VLDR     s2,[r4,#0]
000042  ee410a00          VMLA.F32 s1,s2,s0
000046  edc40a07          VSTR     s1,[r4,#0x1c]
;;;544    	if(Pitchpid.Intx >  Pitchpid.Intmax)	Pitchpid.Intx= Pitchpid.Intmax;
00004a  edd40a07          VLDR     s1,[r4,#0x1c]
00004e  ed941a06          VLDR     s2,[r4,#0x18]
000052  eef40ac1          VCMPE.F32 s1,s2
000056  eef1fa10          VMRS     APSR_nzcv,FPSCR
00005a  dd03              BLE      |L10.100|
00005c  edd40a06          VLDR     s1,[r4,#0x18]
000060  edc40a07          VSTR     s1,[r4,#0x1c]
                  |L10.100|
;;;545    	if(Pitchpid.Intx <- Pitchpid.Intmax)	Pitchpid.Intx=-Pitchpid.Intmax;
000064  4c95              LDR      r4,|L10.700|
000066  edd40a07          VLDR     s1,[r4,#0x1c]
00006a  ed941a06          VLDR     s2,[r4,#0x18]
00006e  eeb11a41          VNEG.F32 s2,s2
000072  eef40ac1          VCMPE.F32 s1,s2
000076  eef1fa10          VMRS     APSR_nzcv,FPSCR
00007a  d205              BCS      |L10.136|
00007c  edd40a06          VLDR     s1,[r4,#0x18]
000080  eef10a60          VNEG.F32 s1,s1
000084  edc40a07          VSTR     s1,[r4,#0x1c]
                  |L10.136|
;;;546    //		Rollpid.Intx = Rollpid.error-2*Rollpid.lasterror+Rollpid.lasterror2;
;;;547    	Rollpid.Intx+=Rollpid.error*dt;
000088  4c8d              LDR      r4,|L10.704|
00008a  edd40a07          VLDR     s1,[r4,#0x1c]
00008e  ed941a00          VLDR     s2,[r4,#0]
000092  ee410a00          VMLA.F32 s1,s2,s0
000096  edc40a07          VSTR     s1,[r4,#0x1c]
;;;548    	if(Rollpid.Intx >  Rollpid.Intmax)	Rollpid.Intx= Rollpid.Intmax;
00009a  edd40a07          VLDR     s1,[r4,#0x1c]
00009e  ed941a06          VLDR     s2,[r4,#0x18]
0000a2  eef40ac1          VCMPE.F32 s1,s2
0000a6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000aa  dd03              BLE      |L10.180|
0000ac  edd40a06          VLDR     s1,[r4,#0x18]
0000b0  edc40a07          VSTR     s1,[r4,#0x1c]
                  |L10.180|
;;;549    	if(Rollpid.Intx <- Rollpid.Intmax)	Rollpid.Intx=-Rollpid.Intmax;
0000b4  4c82              LDR      r4,|L10.704|
0000b6  edd40a07          VLDR     s1,[r4,#0x1c]
0000ba  ed941a06          VLDR     s2,[r4,#0x18]
0000be  eeb11a41          VNEG.F32 s2,s2
0000c2  eef40ac1          VCMPE.F32 s1,s2
0000c6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000ca  d205              BCS      |L10.216|
0000cc  edd40a06          VLDR     s1,[r4,#0x18]
0000d0  eef10a60          VNEG.F32 s1,s1
0000d4  edc40a07          VSTR     s1,[r4,#0x1c]
                  |L10.216|
;;;550    //		Yawpid.Intx=Yawpid.error-2*Yawpid.lasterror+Yawpid.lasterror2;
;;;551    	Yawpid.Intx+=Yawpid.error*dt;
0000d8  4c7a              LDR      r4,|L10.708|
0000da  edd40a07          VLDR     s1,[r4,#0x1c]
0000de  ed941a00          VLDR     s2,[r4,#0]
0000e2  ee410a00          VMLA.F32 s1,s2,s0
0000e6  edc40a07          VSTR     s1,[r4,#0x1c]
;;;552    	if(Yawpid.Intx >  Yawpid.Intmax)	Yawpid.Intx= Yawpid.Intmax;
0000ea  edd40a07          VLDR     s1,[r4,#0x1c]
0000ee  ed941a06          VLDR     s2,[r4,#0x18]
0000f2  eef40ac1          VCMPE.F32 s1,s2
0000f6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000fa  dd03              BLE      |L10.260|
0000fc  edd40a06          VLDR     s1,[r4,#0x18]
000100  edc40a07          VSTR     s1,[r4,#0x1c]
                  |L10.260|
;;;553    	if(Yawpid.Intx <- Yawpid.Intmax)	Yawpid.Intx=-Yawpid.Intmax;
000104  4c6f              LDR      r4,|L10.708|
000106  edd40a07          VLDR     s1,[r4,#0x1c]
00010a  ed941a06          VLDR     s2,[r4,#0x18]
00010e  eeb11a41          VNEG.F32 s2,s2
000112  eef40ac1          VCMPE.F32 s1,s2
000116  eef1fa10          VMRS     APSR_nzcv,FPSCR
00011a  d205              BCS      |L10.296|
00011c  edd40a06          VLDR     s1,[r4,#0x18]
000120  eef10a60          VNEG.F32 s1,s1
000124  edc40a07          VSTR     s1,[r4,#0x1c]
                  |L10.296|
;;;554    	
;;;555    /*************************Íâ»· p iÏî*********************************************/	
;;;556    	  Pitchpid.controutput=Pitchpid.kp*Pitchpid.error+Pitchpid.ki *Pitchpid.Intx+Pitchpid.kd*(Pitchpid.error-Pitchpid.lasterror);
000128  4c64              LDR      r4,|L10.700|
00012a  edd40a03          VLDR     s1,[r4,#0xc]
00012e  ed941a00          VLDR     s2,[r4,#0]
000132  ee600a81          VMUL.F32 s1,s1,s2
000136  ed941a04          VLDR     s2,[r4,#0x10]
00013a  edd41a07          VLDR     s3,[r4,#0x1c]
00013e  ee410a21          VMLA.F32 s1,s2,s3
000142  ed941a00          VLDR     s2,[r4,#0]
000146  edd41a01          VLDR     s3,[r4,#4]
00014a  ee311a61          VSUB.F32 s2,s2,s3
00014e  edd41a05          VLDR     s3,[r4,#0x14]
000152  ee410a81          VMLA.F32 s1,s3,s2
000156  edc40a08          VSTR     s1,[r4,#0x20]
;;;557    	  Rollpid .controutput=Rollpid .kp*Rollpid .error+Rollpid .ki *Rollpid.Intx+Rollpid .kd*(Rollpid.error-Rollpid.lasterror);
00015a  4c59              LDR      r4,|L10.704|
00015c  edd40a03          VLDR     s1,[r4,#0xc]
000160  ed941a00          VLDR     s2,[r4,#0]
000164  ee600a81          VMUL.F32 s1,s1,s2
000168  ed941a04          VLDR     s2,[r4,#0x10]
00016c  edd41a07          VLDR     s3,[r4,#0x1c]
000170  ee410a21          VMLA.F32 s1,s2,s3
000174  ed941a00          VLDR     s2,[r4,#0]
000178  edd41a01          VLDR     s3,[r4,#4]
00017c  ee311a61          VSUB.F32 s2,s2,s3
000180  edd41a05          VLDR     s3,[r4,#0x14]
000184  ee410a81          VMLA.F32 s1,s3,s2
000188  edc40a08          VSTR     s1,[r4,#0x20]
;;;558    	  Yawpid  .controutput=Yawpid  .kp*Yawpid  .error+Yawpid  .ki *Yawpid.Intx+Yawpid  .kd*(Yawpid.error-Yawpid.lasterror);
00018c  4c4d              LDR      r4,|L10.708|
00018e  edd40a03          VLDR     s1,[r4,#0xc]
000192  ed941a00          VLDR     s2,[r4,#0]
000196  ee600a81          VMUL.F32 s1,s1,s2
00019a  ed941a04          VLDR     s2,[r4,#0x10]
00019e  edd41a07          VLDR     s3,[r4,#0x1c]
0001a2  ee410a21          VMLA.F32 s1,s2,s3
0001a6  ed941a00          VLDR     s2,[r4,#0]
0001aa  edd41a01          VLDR     s3,[r4,#4]
0001ae  ee311a61          VSUB.F32 s2,s2,s3
0001b2  edd41a05          VLDR     s3,[r4,#0x14]
0001b6  ee410a81          VMLA.F32 s1,s3,s2
0001ba  edc40a08          VSTR     s1,[r4,#0x20]
;;;559    //		u1_printf("%7.3f\t%7.3f\t%7.3f\r\n",Pitchpid.controutput,Rollpid.controutput,Yawpid.controutput );
;;;560    //		delay_ms(10);
;;;561    /*************************Íâ»·IntxÏî*********************************************/
;;;562    		Pitchpid.lasterror2=Pitchpid.lasterror;
0001be  4c3f              LDR      r4,|L10.700|
0001c0  edd40a01          VLDR     s1,[r4,#4]
0001c4  edc40a02          VSTR     s1,[r4,#8]
;;;563    		Pitchpid.lasterror=Pitchpid.error;
0001c8  edd40a00          VLDR     s1,[r4,#0]
0001cc  edc40a01          VSTR     s1,[r4,#4]
;;;564    		Rollpid.lasterror2=Rollpid.lasterror;
0001d0  4c3b              LDR      r4,|L10.704|
0001d2  edd40a01          VLDR     s1,[r4,#4]
0001d6  edc40a02          VSTR     s1,[r4,#8]
;;;565    		Rollpid.lasterror=Rollpid.error;
0001da  edd40a00          VLDR     s1,[r4,#0]
0001de  edc40a01          VSTR     s1,[r4,#4]
;;;566    		Yawpid.lasterror2=Yawpid.lasterror;
0001e2  4c38              LDR      r4,|L10.708|
0001e4  edd40a01          VLDR     s1,[r4,#4]
0001e8  edc40a02          VSTR     s1,[r4,#8]
;;;567    		Yawpid.lasterror=Yawpid.error;
0001ec  edd40a00          VLDR     s1,[r4,#0]
0001f0  edc40a01          VSTR     s1,[r4,#4]
;;;568    /**********************************limit****************************************/
;;;569    		if(Pitchpid.controutput> 1.5f)	Pitchpid.controutput= 1.5f;
0001f4  4c31              LDR      r4,|L10.700|
0001f6  edd40a08          VLDR     s1,[r4,#0x20]
0001fa  eeb71a08          VMOV.F32 s2,#1.50000000
0001fe  eef40ac1          VCMPE.F32 s1,s2
000202  eef1fa10          VMRS     APSR_nzcv,FPSCR
000206  dd03              BLE      |L10.528|
000208  eef70a08          VMOV.F32 s1,#1.50000000
00020c  edc40a08          VSTR     s1,[r4,#0x20]
                  |L10.528|
;;;570    		if(Pitchpid.controutput<-1.5f)	Pitchpid.controutput=-1.5f;
000210  4c2a              LDR      r4,|L10.700|
000212  edd40a08          VLDR     s1,[r4,#0x20]
000216  eebf1a08          VMOV.F32 s2,#-1.50000000
00021a  eef40ac1          VCMPE.F32 s1,s2
00021e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000222  d203              BCS      |L10.556|
000224  eeff0a08          VMOV.F32 s1,#-1.50000000
000228  edc40a08          VSTR     s1,[r4,#0x20]
                  |L10.556|
;;;571    		if(Rollpid.controutput>  1.5f)	Rollpid.controutput= 1.5f;
00022c  4c24              LDR      r4,|L10.704|
00022e  edd40a08          VLDR     s1,[r4,#0x20]
000232  eeb71a08          VMOV.F32 s2,#1.50000000
000236  eef40ac1          VCMPE.F32 s1,s2
00023a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00023e  dd03              BLE      |L10.584|
000240  eef70a08          VMOV.F32 s1,#1.50000000
000244  edc40a08          VSTR     s1,[r4,#0x20]
                  |L10.584|
;;;572    		if(Rollpid.controutput< -1.5f)	Rollpid.controutput=-1.5f;
000248  4c1d              LDR      r4,|L10.704|
00024a  edd40a08          VLDR     s1,[r4,#0x20]
00024e  eebf1a08          VMOV.F32 s2,#-1.50000000
000252  eef40ac1          VCMPE.F32 s1,s2
000256  eef1fa10          VMRS     APSR_nzcv,FPSCR
00025a  d203              BCS      |L10.612|
00025c  eeff0a08          VMOV.F32 s1,#-1.50000000
000260  edc40a08          VSTR     s1,[r4,#0x20]
                  |L10.612|
;;;573    		if(Yawpid.controutput> 1.0f)	  Yawpid.controutput= 1.0f;
000264  4c17              LDR      r4,|L10.708|
000266  edd40a08          VLDR     s1,[r4,#0x20]
00026a  eeb71a00          VMOV.F32 s2,#1.00000000
00026e  eef40ac1          VCMPE.F32 s1,s2
000272  eef1fa10          VMRS     APSR_nzcv,FPSCR
000276  dd03              BLE      |L10.640|
000278  eef70a00          VMOV.F32 s1,#1.00000000
00027c  edc40a08          VSTR     s1,[r4,#0x20]
                  |L10.640|
;;;574    		if(Yawpid.controutput<-1.0f)	  Yawpid.controutput=-1.0f;		
000280  4c10              LDR      r4,|L10.708|
000282  edd40a08          VLDR     s1,[r4,#0x20]
000286  eebf1a00          VMOV.F32 s2,#-1.00000000
00028a  eef40ac1          VCMPE.F32 s1,s2
00028e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000292  d203              BCS      |L10.668|
000294  eeff0a00          VMOV.F32 s1,#-1.00000000
000298  edc40a08          VSTR     s1,[r4,#0x20]
                  |L10.668|
;;;575    /**********************************output****************************************/		
;;;576        ctrout[0]=Pitchpid.controutput;
00029c  4c07              LDR      r4,|L10.700|
00029e  edd40a08          VLDR     s1,[r4,#0x20]
0002a2  edc30a00          VSTR     s1,[r3,#0]
;;;577    		ctrout[1]=Rollpid.controutput;
0002a6  4c06              LDR      r4,|L10.704|
0002a8  edd40a08          VLDR     s1,[r4,#0x20]
0002ac  edc30a01          VSTR     s1,[r3,#4]
;;;578    		ctrout[2]=Yawpid.controutput;
0002b0  4c04              LDR      r4,|L10.708|
0002b2  edd40a08          VLDR     s1,[r4,#0x20]
0002b6  edc30a02          VSTR     s1,[r3,#8]
;;;579    //		u1_printf("%7.3f\t%7.3f\t%7.3f\r\n",Pitchpid.controutput,Rollpid.controutput,Yawpid.controutput);
;;;580    ////		printf("ok");
;;;581    //		delay_ms(10);
;;;582    ///*************************ÄÚ»· error*********************************************/
;;;583    //		Gyropitchpid.error=Pitchpid.controutput-velocity->Y;
;;;584    //		Gyrorollpid .error=Rollpid.controutput-velocity->X;
;;;585    //		Gyroyawpid.error=Yawpid.controutput-velocity->Z;
;;;586    ///*************************ÄÚ»· p dÏî*********************************************/
;;;587    //		Gyropitchpid.controutput=Gyropitchpid.kp*Gyropitchpid.error+Gyropitchpid.kd*(Gyropitchpid.error-Gyropitchpid.lasterror);
;;;588    //		Gyrorollpid .controutput=Gyrorollpid .kp*Gyrorollpid .error+Gyrorollpid .kd*(Gyrorollpid .error-Gyrorollpid .lasterror);
;;;589    //		Gyroyawpid  .controutput=Gyroyawpid  .kp*Gyroyawpid  .error+Gyroyawpid  .kd*(Gyroyawpid  .error-Gyroyawpid  .lasterror);		
;;;590    ///**********************************limit****************************************/
;;;591    //		if(Gyropitchpid.controutput> 1.5f)	Gyropitchpid.controutput= 1.5f;
;;;592    //		if(Gyropitchpid.controutput<-1.5f)	Gyropitchpid.controutput=-1.5f;
;;;593    //		if(Gyrorollpid.controutput>  1.5f)	Gyrorollpid.controutput= 1.5f;
;;;594    //		if(Gyrorollpid.controutput< -1.5f)	Gyrorollpid.controutput=-1.5f;
;;;595    //		if(Gyroyawpid.controutput> 1.0f)	Gyroyawpid.controutput= 1.0f;
;;;596    //		if(Gyroyawpid.controutput<-1.0f)	Gyroyawpid.controutput=-1.0f;		
;;;597    ///************************************exchange****************************************/	
;;;598    //		ctrout[0]=Gyropitchpid.controutput;
;;;599    //		ctrout[1]=Gyrorollpid.controutput;
;;;600    //		ctrout[2]=Gyroyawpid.controutput;
;;;601    ////		u1_printf("%7.3f\t%7.3f\t%7.3f\r\n",Gyropitchpid.controutput,Gyrorollpid.controutput,Gyroyawpid.controutput );
;;;602    ////		delay_ms(10);		
;;;603    ///***********************************value saved*******************************************/
;;;604    //	Gyropitchpid.lasterror=Gyropitchpid.error;
;;;605    //	Gyrorollpid.lasterror =Gyrorollpid.error;
;;;606    //	Gyroyawpid.lasterror  =Gyroyawpid.error;
;;;607    	
;;;608    }
0002ba  bd10              POP      {r4,pc}
;;;609    
                          ENDP

                  |L10.700|
                          DCD      Pitchpid
                  |L10.704|
                          DCD      Rollpid
                  |L10.708|
                          DCD      Yawpid

                          AREA ||i._Z3TRIffff||, CODE, READONLY, ALIGN=2

                  _Z3TRIffff PROC ; TRI(float, float, float, float)
;;;347    
;;;348    float TRI(float X,float DOWN,float MID,float UP)
000000  eeb02a40          VMOV.F32 s4,s0
;;;349    {
;;;350    	if( X >= DOWN && X <= UP)
000004  eeb42ae0          VCMPE.F32 s4,s1
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  db1b              BLT      |L11.70|
00000e  eeb42ae1          VCMPE.F32 s4,s3
000012  eef1fa10          VMRS     APSR_nzcv,FPSCR
000016  d816              BHI      |L11.70|
;;;351    		return ( 1 - myabs(X - MID)/( MID - DOWN) );
000018  ee320a41          VSUB.F32 s0,s4,s2
00001c  eeb50ac0          VCMPE.F32 s0,#0.0
000020  eef1fa10          VMRS     APSR_nzcv,FPSCR
000024  dd02              BLE      |L11.44|
000026  ee320a41          VSUB.F32 s0,s4,s2
00002a  e003              B        |L11.52|
                  |L11.44|
00002c  ee320a41          VSUB.F32 s0,s4,s2
000030  eeb10a40          VNEG.F32 s0,s0
                  |L11.52|
000034  ee313a60          VSUB.F32 s6,s2,s1
000038  eec02a03          VDIV.F32 s5,s0,s6
00003c  eeb70a00          VMOV.F32 s0,#1.00000000
000040  ee300a62          VSUB.F32 s0,s0,s5
                  |L11.68|
;;;352    	else
;;;353    		return 0;
;;;354    }
000044  4770              BX       lr
                  |L11.70|
000046  ed9f0a01          VLDR     s0,|L11.76|
00004a  e7fb              B        |L11.68|
;;;355    float LAD_DOWN(float X,float MID,float UP)
                          ENDP

                  |L11.76|
00004c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._Z6LAD_UPfff||, CODE, READONLY, ALIGN=2

                  _Z6LAD_UPfff PROC ; LAD_UP(float, float, float)
;;;364    
;;;365    float LAD_UP(float X,float DOWN,float MID)
000000  eef01a40          VMOV.F32 s3,s0
;;;366    {
;;;367    	if(	X >= MID)
000004  eef41ac1          VCMPE.F32 s3,s2
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  db02              BLT      |L12.20|
;;;368    		return 1.0f;
00000e  eeb70a00          VMOV.F32 s0,#1.00000000
                  |L12.18|
;;;369    	else if( X >= DOWN )
;;;370    		return (X - DOWN) / (MID - DOWN);
;;;371    	else
;;;372    		return 0;
;;;373    }
000012  4770              BX       lr
                  |L12.20|
000014  eef41ae0          VCMPE.F32 s3,s1                 ;369
000018  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;369
00001c  db06              BLT      |L12.44|
00001e  ee312ae0          VSUB.F32 s4,s3,s1              ;370
000022  ee712a60          VSUB.F32 s5,s2,s1              ;370
000026  ee820a22          VDIV.F32 s0,s4,s5              ;370
00002a  e7f2              B        |L12.18|
                  |L12.44|
00002c  ed9f0a01          VLDR     s0,|L12.52|
000030  e7ef              B        |L12.18|
;;;374    
                          ENDP

000032  0000              DCW      0x0000
                  |L12.52|
000034  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._Z8LAD_DOWNfff||, CODE, READONLY, ALIGN=2

                  _Z8LAD_DOWNfff PROC ; LAD_DOWN(float, float, float)
;;;354    }
;;;355    float LAD_DOWN(float X,float MID,float UP)
000000  eef01a40          VMOV.F32 s3,s0
;;;356    {
;;;357    	if(	X <= MID)
000004  eef41ae0          VCMPE.F32 s3,s1
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  d802              BHI      |L13.20|
;;;358    		return 1.0f;
00000e  eeb70a00          VMOV.F32 s0,#1.00000000
                  |L13.18|
;;;359    	else if( X <= UP )
;;;360    		return (X - UP) / (MID - UP);
;;;361    	else
;;;362    		return 0;
;;;363    }
000012  4770              BX       lr
                  |L13.20|
000014  eef41ac1          VCMPE.F32 s3,s2                 ;359
000018  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;359
00001c  d806              BHI      |L13.44|
00001e  ee312ac1          VSUB.F32 s4,s3,s2              ;360
000022  ee702ac1          VSUB.F32 s5,s1,s2              ;360
000026  ee820a22          VDIV.F32 s0,s4,s5              ;360
00002a  e7f2              B        |L13.18|
                  |L13.44|
00002c  ed9f0a01          VLDR     s0,|L13.52|
000030  e7ef              B        |L13.18|
;;;364    
                          ENDP

000032  0000              DCW      0x0000
                  |L13.52|
000034  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4CPID9AdjustPIDEv||, CODE, READONLY, ALIGN=2

                  _ZN4CPID9AdjustPIDEv PROC ; CPID::AdjustPID()
;;;100    
;;;101    void CPID::AdjustPID(void)
000000  b510              PUSH     {r4,lr}
;;;102    {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
;;;103    	float now_error;
;;;104    
;;;105    	if(UpdataTimeStamp()) return;
000008  f104005c          ADD      r0,r4,#0x5c
00000c  f7fffffe          BL       _ZN8PIDTimer15UpdataTimeStampEv ; PIDTimer::UpdataTimeStamp()
000010  b110              CBZ      r0,|L14.24|
                  |L14.18|
;;;106    
;;;107    
;;;108    	now_error = Target - Current;
;;;109    	now_error = Slider_Filter(filterstruct.filterbuff[0],&filterstruct.num[0],5,now_error);
;;;110    	
;;;111    
;;;112    	//P
;;;113    	PTerm = Kp * now_error;
;;;114    	PTerm = Constrain(PTerm, Rpi, Rpa);
;;;115    
;;;116    	//I
;;;117    
;;;118    	ITerm +=  Ki * now_error * dt;
;;;119    
;;;120    	ITerm = Constrain(ITerm, Rii, Ria);
;;;121    
;;;122    
;;;123    
;;;124    	Omega = Slider_Filter(filterstruct.filterbuff[1],&filterstruct.num[1],5,Omega);
;;;125    	DTerm =   Kd * (Omega - Omega_Offset);
;;;126    	Out = PTerm + ITerm + DTerm;
;;;127    	Out = Slider_Filter(filterstruct.filterbuff[2],&filterstruct.num[2],5,Out);//滤波，输出更加平滑
;;;128    
;;;129    	if(myabs(now_error) <= DeadZone)
;;;130    	{
;;;131    		counter++;
;;;132    		if(counter >= 1024)
;;;133    			counter = 1024;
;;;134    	}
;;;135    	else
;;;136    	{
;;;137    		counter--;
;;;138    		if(counter <= 0)
;;;139    			counter = 0;
;;;140    	}
;;;141    	if(counter >= 1000)
;;;142    	{
;;;143    		Out = 0;
;;;144    		ITerm = 0;
;;;145    	}
;;;146    }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
                  |L14.24|
000018  ed940a01          VLDR     s0,[r4,#4]            ;108
00001c  edd40a02          VLDR     s1,[r4,#8]            ;108
000020  ee300a60          VSUB.F32 s0,s0,s1              ;108
000024  eeb08a40          VMOV.F32 s16,s0                ;108
000028  eeb00a48          VMOV.F32 s0,s16                ;109
00002c  2205              MOVS     r2,#5                 ;109
00002e  f104016c          ADD      r1,r4,#0x6c           ;109
000032  1d08              ADDS     r0,r1,#4              ;109
000034  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000038  eeb08a40          VMOV.F32 s16,s0                ;109
00003c  ed940a08          VLDR     s0,[r4,#0x20]         ;113
000040  ee200a08          VMUL.F32 s0,s0,s16             ;113
000044  ed840a05          VSTR     s0,[r4,#0x14]         ;113
000048  edd41a0f          VLDR     s3,[r4,#0x3c]         ;114
00004c  eeb01a61          VMOV.F32 s2,s3                 ;114
000050  edd41a0b          VLDR     s3,[r4,#0x2c]         ;114
000054  eef00a61          VMOV.F32 s1,s3                 ;114
000058  edd41a05          VLDR     s3,[r4,#0x14]         ;114
00005c  eeb00a61          VMOV.F32 s0,s3                 ;114
000060  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
000064  ed840a05          VSTR     s0,[r4,#0x14]         ;114
000068  ed940a06          VLDR     s0,[r4,#0x18]         ;118
00006c  edd40a09          VLDR     s1,[r4,#0x24]         ;118
000070  ee600a88          VMUL.F32 s1,s1,s16             ;118
000074  ed941a17          VLDR     s2,[r4,#0x5c]         ;118
000078  ee000a81          VMLA.F32 s0,s1,s2              ;118
00007c  ed840a06          VSTR     s0,[r4,#0x18]         ;118
000080  edd41a10          VLDR     s3,[r4,#0x40]         ;120
000084  eeb01a61          VMOV.F32 s2,s3                 ;120
000088  edd41a0c          VLDR     s3,[r4,#0x30]         ;120
00008c  eef00a61          VMOV.F32 s1,s3                 ;120
000090  edd41a06          VLDR     s3,[r4,#0x18]         ;120
000094  eeb00a61          VMOV.F32 s0,s3                 ;120
000098  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
00009c  ed840a06          VSTR     s0,[r4,#0x18]         ;120
0000a0  edd40a19          VLDR     s1,[r4,#0x64]         ;124
0000a4  eeb00a60          VMOV.F32 s0,s1                 ;124
0000a8  2205              MOVS     r2,#5                 ;124
0000aa  f104016d          ADD      r1,r4,#0x6d           ;124
0000ae  f1040084          ADD      r0,r4,#0x84           ;124
0000b2  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
0000b6  ed840a19          VSTR     s0,[r4,#0x64]         ;124
0000ba  ed940a19          VLDR     s0,[r4,#0x64]         ;125
0000be  edd40a1a          VLDR     s1,[r4,#0x68]         ;125
0000c2  ee300a60          VSUB.F32 s0,s0,s1              ;125
0000c6  edd40a0a          VLDR     s1,[r4,#0x28]         ;125
0000ca  ee200a20          VMUL.F32 s0,s0,s1              ;125
0000ce  ed840a07          VSTR     s0,[r4,#0x1c]         ;125
0000d2  ed940a05          VLDR     s0,[r4,#0x14]         ;126
0000d6  edd40a06          VLDR     s1,[r4,#0x18]         ;126
0000da  ee300a20          VADD.F32 s0,s0,s1              ;126
0000de  edd40a07          VLDR     s1,[r4,#0x1c]         ;126
0000e2  ee300a20          VADD.F32 s0,s0,s1              ;126
0000e6  ed840a03          VSTR     s0,[r4,#0xc]          ;126
0000ea  edd40a03          VLDR     s1,[r4,#0xc]          ;127
0000ee  eeb00a60          VMOV.F32 s0,s1                 ;127
0000f2  2205              MOVS     r2,#5                 ;127
0000f4  f104016e          ADD      r1,r4,#0x6e           ;127
0000f8  f1040098          ADD      r0,r4,#0x98           ;127
0000fc  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000100  ed840a03          VSTR     s0,[r4,#0xc]          ;127
000104  eeb58ac0          VCMPE.F32 s16,#0.0              ;129
000108  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;129
00010c  dd02              BLE      |L14.276|
00010e  eeb00a48          VMOV.F32 s0,s16                ;129
000112  e001              B        |L14.280|
                  |L14.276|
000114  eeb10a48          VNEG.F32 s0,s16                ;129
                  |L14.280|
000118  edd40a13          VLDR     s1,[r4,#0x4c]         ;129
00011c  eeb40ae0          VCMPE.F32 s0,s1                 ;129
000120  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;129
000124  d80e              BHI      |L14.324|
000126  f8340f50          LDRH     r0,[r4,#0x50]!        ;131
00012a  1c40              ADDS     r0,r0,#1              ;131
00012c  b200              SXTH     r0,r0                 ;131
00012e  8020              STRH     r0,[r4,#0]            ;131
000130  f9340950          LDRSH    r0,[r4],#-0x50        ;132
000134  f5b06f80          CMP      r0,#0x400             ;132
000138  db10              BLT      |L14.348|
00013a  f44f6080          MOV      r0,#0x400             ;133
00013e  f8a40050          STRH     r0,[r4,#0x50]         ;133
000142  e00b              B        |L14.348|
                  |L14.324|
000144  f8340f50          LDRH     r0,[r4,#0x50]!        ;137
000148  1e40              SUBS     r0,r0,#1              ;137
00014a  b200              SXTH     r0,r0                 ;137
00014c  8020              STRH     r0,[r4,#0]            ;137
00014e  f9340950          LDRSH    r0,[r4],#-0x50        ;138
000152  2800              CMP      r0,#0                 ;138
000154  dc02              BGT      |L14.348|
000156  2000              MOVS     r0,#0                 ;139
000158  f8a40050          STRH     r0,[r4,#0x50]         ;139
                  |L14.348|
00015c  f9b40050          LDRSH    r0,[r4,#0x50]         ;141
000160  f5b07f7a          CMP      r0,#0x3e8             ;141
000164  db07              BLT      |L14.374|
000166  ed9f0a05          VLDR     s0,|L14.380|
00016a  ed840a03          VSTR     s0,[r4,#0xc]          ;143
00016e  ed9f0a03          VLDR     s0,|L14.380|
000172  ed840a06          VSTR     s0,[r4,#0x18]         ;144
                  |L14.374|
000176  bf00              NOP      
000178  e74b              B        |L14.18|
;;;147    
                          ENDP

00017a  0000              DCW      0x0000
                  |L14.380|
00017c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN5SCPID9AdjustPIDEv||, CODE, READONLY, ALIGN=2

                  _ZN5SCPID9AdjustPIDEv PROC ; SCPID::AdjustPID()
;;;148    
;;;149    void SCPID::AdjustPID(void)
000000  b510              PUSH     {r4,lr}
;;;150    {
000002  4604              MOV      r4,r0
;;;151    	if(UpdataTimeStamp()) return;
000004  f104005c          ADD      r0,r4,#0x5c
000008  f7fffffe          BL       _ZN8PIDTimer15UpdataTimeStampEv ; PIDTimer::UpdataTimeStamp()
00000c  b100              CBZ      r0,|L15.16|
                  |L15.14|
;;;152    
;;;153    	last_error = now_error;
;;;154    	now_error = Target - Current;
;;;155    	now_error = Slider_Filter(filterstruct.filterbuff[0],&filterstruct.num[0],5,now_error);
;;;156    
;;;157    	//P
;;;158    	PTerm = Kp * now_error;
;;;159    	PTerm = Constrain(PTerm, Rpi, Rpa);
;;;160    
;;;161    	//I
;;;162    	ITerm +=  Ki * now_error * dt;
;;;163    	ITerm = Constrain(ITerm, Rii, Ria);
;;;164    
;;;165    	//D
;;;166    	DTerm =   Kd * (now_error - last_error)/dt;
;;;167    	DTerm = Constrain(DTerm, Rdi, Rda);
;;;168    	DTerm = Slider_Filter(filterstruct.filterbuff[1],&filterstruct.num[1],5,DTerm);//滤波，输出更加平滑
;;;169    
;;;170    	Out = PTerm + ITerm + DTerm;
;;;171    	Out = Slider_Filter(filterstruct.filterbuff[2],&filterstruct.num[2],5,Out);//滤波，输出更加平滑
;;;172    	
;;;173    	if(myabs(now_error) <= DeadZone)
;;;174    	{
;;;175    		counter++;
;;;176    		if(counter >= 1024)
;;;177    			counter = 1024;
;;;178    	}
;;;179    	else
;;;180    	{
;;;181    		counter--;
;;;182    		if(counter <= 0)
;;;183    			counter = 0;
;;;184    	}
;;;185    	if(counter >= 1000)
;;;186    	{
;;;187    		Out = 0;
;;;188    		ITerm = 0;
;;;189    	}
;;;190    }
00000e  bd10              POP      {r4,pc}
                  |L15.16|
000010  ed940a15          VLDR     s0,[r4,#0x54]         ;153
000014  ed840a16          VSTR     s0,[r4,#0x58]         ;153
000018  ed940a01          VLDR     s0,[r4,#4]            ;154
00001c  edd40a02          VLDR     s1,[r4,#8]            ;154
000020  ee300a60          VSUB.F32 s0,s0,s1              ;154
000024  ed840a15          VSTR     s0,[r4,#0x54]         ;154
000028  edd40a15          VLDR     s1,[r4,#0x54]         ;155
00002c  eeb00a60          VMOV.F32 s0,s1                 ;155
000030  2205              MOVS     r2,#5                 ;155
000032  f1040164          ADD      r1,r4,#0x64           ;155
000036  1d08              ADDS     r0,r1,#4              ;155
000038  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
00003c  ed840a15          VSTR     s0,[r4,#0x54]         ;155
000040  ed940a08          VLDR     s0,[r4,#0x20]         ;158
000044  edd40a15          VLDR     s1,[r4,#0x54]         ;158
000048  ee200a20          VMUL.F32 s0,s0,s1              ;158
00004c  ed840a05          VSTR     s0,[r4,#0x14]         ;158
000050  edd41a0f          VLDR     s3,[r4,#0x3c]         ;159
000054  eeb01a61          VMOV.F32 s2,s3                 ;159
000058  edd41a0b          VLDR     s3,[r4,#0x2c]         ;159
00005c  eef00a61          VMOV.F32 s1,s3                 ;159
000060  edd41a05          VLDR     s3,[r4,#0x14]         ;159
000064  eeb00a61          VMOV.F32 s0,s3                 ;159
000068  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
00006c  ed840a05          VSTR     s0,[r4,#0x14]         ;159
000070  ed940a09          VLDR     s0,[r4,#0x24]         ;162
000074  edd40a15          VLDR     s1,[r4,#0x54]         ;162
000078  ee600a20          VMUL.F32 s1,s0,s1              ;162
00007c  ed941a17          VLDR     s2,[r4,#0x5c]         ;162
000080  ed940a06          VLDR     s0,[r4,#0x18]         ;162
000084  ee000a81          VMLA.F32 s0,s1,s2              ;162
000088  ed840a06          VSTR     s0,[r4,#0x18]         ;162
00008c  edd41a10          VLDR     s3,[r4,#0x40]         ;163
000090  eeb01a61          VMOV.F32 s2,s3                 ;163
000094  edd41a0c          VLDR     s3,[r4,#0x30]         ;163
000098  eef00a61          VMOV.F32 s1,s3                 ;163
00009c  edd41a06          VLDR     s3,[r4,#0x18]         ;163
0000a0  eeb00a61          VMOV.F32 s0,s3                 ;163
0000a4  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
0000a8  ed840a06          VSTR     s0,[r4,#0x18]         ;163
0000ac  ed940a15          VLDR     s0,[r4,#0x54]         ;166
0000b0  edd40a16          VLDR     s1,[r4,#0x58]         ;166
0000b4  ee300a60          VSUB.F32 s0,s0,s1              ;166
0000b8  edd40a0a          VLDR     s1,[r4,#0x28]         ;166
0000bc  ee200a20          VMUL.F32 s0,s0,s1              ;166
0000c0  edd40a17          VLDR     s1,[r4,#0x5c]         ;166
0000c4  ee801a20          VDIV.F32 s2,s0,s1              ;166
0000c8  ed841a07          VSTR     s2,[r4,#0x1c]         ;166
0000cc  edd41a11          VLDR     s3,[r4,#0x44]         ;167
0000d0  eeb01a61          VMOV.F32 s2,s3                 ;167
0000d4  edd41a0d          VLDR     s3,[r4,#0x34]         ;167
0000d8  eef00a61          VMOV.F32 s1,s3                 ;167
0000dc  edd41a07          VLDR     s3,[r4,#0x1c]         ;167
0000e0  eeb00a61          VMOV.F32 s0,s3                 ;167
0000e4  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
0000e8  ed840a07          VSTR     s0,[r4,#0x1c]         ;167
0000ec  edd40a07          VLDR     s1,[r4,#0x1c]         ;168
0000f0  eeb00a60          VMOV.F32 s0,s1                 ;168
0000f4  2205              MOVS     r2,#5                 ;168
0000f6  f1040165          ADD      r1,r4,#0x65           ;168
0000fa  f104007c          ADD      r0,r4,#0x7c           ;168
0000fe  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000102  ed840a07          VSTR     s0,[r4,#0x1c]         ;168
000106  ed940a05          VLDR     s0,[r4,#0x14]         ;170
00010a  edd40a06          VLDR     s1,[r4,#0x18]         ;170
00010e  ee300a20          VADD.F32 s0,s0,s1              ;170
000112  edd40a07          VLDR     s1,[r4,#0x1c]         ;170
000116  ee300a20          VADD.F32 s0,s0,s1              ;170
00011a  ed840a03          VSTR     s0,[r4,#0xc]          ;170
00011e  edd40a03          VLDR     s1,[r4,#0xc]          ;171
000122  eeb00a60          VMOV.F32 s0,s1                 ;171
000126  2205              MOVS     r2,#5                 ;171
000128  f1040166          ADD      r1,r4,#0x66           ;171
00012c  f1040090          ADD      r0,r4,#0x90           ;171
000130  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000134  ed840a03          VSTR     s0,[r4,#0xc]          ;171
000138  ed940a15          VLDR     s0,[r4,#0x54]         ;173
00013c  eeb50ac0          VCMPE.F32 s0,#0.0               ;173
000140  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;173
000144  dd02              BLE      |L15.332|
000146  ed940a15          VLDR     s0,[r4,#0x54]         ;173
00014a  e003              B        |L15.340|
                  |L15.332|
00014c  ed940a15          VLDR     s0,[r4,#0x54]         ;173
000150  eeb10a40          VNEG.F32 s0,s0                 ;173
                  |L15.340|
000154  edd40a13          VLDR     s1,[r4,#0x4c]         ;173
000158  eeb40ae0          VCMPE.F32 s0,s1                 ;173
00015c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;173
000160  d80e              BHI      |L15.384|
000162  f8340f50          LDRH     r0,[r4,#0x50]!        ;175
000166  1c40              ADDS     r0,r0,#1              ;175
000168  b200              SXTH     r0,r0                 ;175
00016a  8020              STRH     r0,[r4,#0]            ;175
00016c  f9340950          LDRSH    r0,[r4],#-0x50        ;176
000170  f5b06f80          CMP      r0,#0x400             ;176
000174  db10              BLT      |L15.408|
000176  f44f6080          MOV      r0,#0x400             ;177
00017a  f8a40050          STRH     r0,[r4,#0x50]         ;177
00017e  e00b              B        |L15.408|
                  |L15.384|
000180  f8340f50          LDRH     r0,[r4,#0x50]!        ;181
000184  1e40              SUBS     r0,r0,#1              ;181
000186  b200              SXTH     r0,r0                 ;181
000188  8020              STRH     r0,[r4,#0]            ;181
00018a  f9340950          LDRSH    r0,[r4],#-0x50        ;182
00018e  2800              CMP      r0,#0                 ;182
000190  dc02              BGT      |L15.408|
000192  2000              MOVS     r0,#0                 ;183
000194  f8a40050          STRH     r0,[r4,#0x50]         ;183
                  |L15.408|
000198  f9b40050          LDRSH    r0,[r4,#0x50]         ;185
00019c  f5b07f7a          CMP      r0,#0x3e8             ;185
0001a0  db07              BLT      |L15.434|
0001a2  ed9f0a05          VLDR     s0,|L15.440|
0001a6  ed840a03          VSTR     s0,[r4,#0xc]          ;187
0001aa  ed9f0a03          VLDR     s0,|L15.440|
0001ae  ed840a06          VSTR     s0,[r4,#0x18]         ;188
                  |L15.434|
0001b2  bf00              NOP      
0001b4  e72b              B        |L15.14|
;;;191    
                          ENDP

0001b6  0000              DCW      0x0000
                  |L15.440|
0001b8  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN7PIDBase10SetCurrentEf||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase10SetCurrentEf PROC ; PIDBase::SetCurrent(float)
;;;30     }
;;;31     void PIDBase::SetCurrent(float current){
000000  ed800a02          VSTR     s0,[r0,#8]
;;;32     	Current = current;
;;;33     }
000004  4770              BX       lr
;;;34     
                          ENDP


                          AREA ||i._ZN7PIDBase10SetDMaxMinEff||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase10SetDMaxMinEff PROC ; PIDBase::SetDMaxMin(float, float)
;;;57     }
;;;58     void PIDBase::SetDMaxMin(float m_Rdi, float m_Rda){
000000  ed800a0d          VSTR     s0,[r0,#0x34]
;;;59     	Rdi = m_Rdi;
;;;60     	Rda = m_Rda;
000004  edc00a11          VSTR     s1,[r0,#0x44]
;;;61     	// printf("Rdi:%5.2f\tRda:%5.2f\r\n",this->Rdi,this->Rda);//调试用
;;;62     }
000008  4770              BX       lr
;;;63     
                          ENDP


                          AREA ||i._ZN7PIDBase10SetIMaxMinEff||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase10SetIMaxMinEff PROC ; PIDBase::SetIMaxMin(float, float)
;;;52     
;;;53     void PIDBase::SetIMaxMin(float m_Rii, float m_Ria){
000000  ed800a0c          VSTR     s0,[r0,#0x30]
;;;54     	Rii = m_Rii;
;;;55     	Ria = m_Ria;
000004  edc00a10          VSTR     s1,[r0,#0x40]
;;;56     	// printf("Rii:%5.2f\tRia:%5.2f\r\n",this->Rii,this->Ria);//调试用
;;;57     }
000008  4770              BX       lr
;;;58     void PIDBase::SetDMaxMin(float m_Rdi, float m_Rda){
                          ENDP


                          AREA ||i._ZN7PIDBase10SetPMaxMinEff||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase10SetPMaxMinEff PROC ; PIDBase::SetPMaxMin(float, float)
;;;46     }
;;;47     void PIDBase::SetPMaxMin(float m_Rpi, float m_Rpa){
000000  ed800a0b          VSTR     s0,[r0,#0x2c]
;;;48     	Rpi = m_Rpi;
;;;49     	Rpa = m_Rpa;
000004  edc00a0f          VSTR     s1,[r0,#0x3c]
;;;50     	// printf("Rpi:%5.2f\tRpa:%5.2f\r\n",this->Rpi,this->Rpa);//调试用
;;;51     }
000008  4770              BX       lr
;;;52     
                          ENDP


                          AREA ||i._ZN7PIDBase11SetDeadZoneEf||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase11SetDeadZoneEf PROC ; PIDBase::SetDeadZone(float)
;;;63     
;;;64     void PIDBase::SetDeadZone(float m_DeadZone){
000000  ed800a13          VSTR     s0,[r0,#0x4c]
;;;65      	DeadZone = m_DeadZone;
;;;66      	// printf("DeadZone:%5.2f\tD_dt_time:%d\r\n",this->DeadZone,this->D_dt_time);//调试用
;;;67     }
000004  4770              BX       lr
;;;68     
                          ENDP


                          AREA ||i._ZN7PIDBase15SetTargetMaxMinEff||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase15SetTargetMaxMinEff PROC ; PIDBase::SetTargetMaxMin(float, float)
;;;41     
;;;42     void PIDBase::SetTargetMaxMin( float m_Ti, float m_Ta){
000000  ed800a0e          VSTR     s0,[r0,#0x38]
;;;43     	Ti = m_Ti;
;;;44     	Ta = m_Ta;
000004  edc00a12          VSTR     s1,[r0,#0x48]
;;;45     	// printf("Ti:%5.2f\tTa:%5.2f\r\n",this->Ti,this->Ta);//调试用
;;;46     }
000008  4770              BX       lr
;;;47     void PIDBase::SetPMaxMin(float m_Rpi, float m_Rpa){
                          ENDP


                          AREA ||i._ZN7PIDBase6SetPIDEfff||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase6SetPIDEfff PROC ; PIDBase::SetPID(float, float, float)
;;;34     
;;;35     void PIDBase::SetPID(float m_Kp, float m_Ki, float m_Kd){
000000  ed800a08          VSTR     s0,[r0,#0x20]
;;;36     	Kp = m_Kp;
;;;37     	Ki = m_Ki;
000004  edc00a09          VSTR     s1,[r0,#0x24]
;;;38     	Kd = m_Kd;
000008  ed801a0a          VSTR     s2,[r0,#0x28]
;;;39     	// printf("P:%5.2f\tI:%5.2f\tD:%5.2f\r\n",this->Kp,this->Ki,this->Kd);//调试用
;;;40     }
00000c  4770              BX       lr
;;;41     
                          ENDP


                          AREA ||i._ZN7PIDBase9SetTargetEf||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase9SetTargetEf PROC ; PIDBase::SetTarget(float)
;;;26     }
;;;27     void PIDBase::SetTarget(float target){
000000  b510              PUSH     {r4,lr}
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;28     	Target = Constrain(target,Ti,Ta);
00000c  ed940a12          VLDR     s0,[r4,#0x48]
000010  eeb01a40          VMOV.F32 s2,s0
000014  ed940a0e          VLDR     s0,[r4,#0x38]
000018  eef00a40          VMOV.F32 s1,s0
00001c  eeb00a48          VMOV.F32 s0,s16
000020  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
000024  ed840a01          VSTR     s0,[r4,#4]
;;;29     	// Target = target;
;;;30     }
000028  ecbd8b02          VPOP     {d8}
00002c  bd10              POP      {r4,pc}
;;;31     void PIDBase::SetCurrent(float current){
                          ENDP


                          AREA ||i._ZN7PIDBaseC1Efffffffffffff||, CODE, READONLY, ALIGN=2

                  _ZN7PIDBaseC2Efffffffffffff                  ; Alternate entry point ; PIDBase::PIDBase__sub_object(float, float, float, float, float, float, float, float, float, float, float, float, float)
                  _ZN7PIDBaseC1Efffffffffffff PROC ; PIDBase::PIDBase(float, float, float, float, float, float, float, float, float, float, float, float, float)
;;;7      
;;;8      PIDBase::PIDBase(float m_Kp, float m_Ki, float m_Kd, float m_Target,
;;;9      float m_Rpi, float m_Rpa, float m_Rii, float m_Ria, float m_Rdi, float m_Rda, float m_Ti, float m_Ta,float m_DeadZone){
;;;10     	Kp       = m_Kp;
;;;11     	Ki       = m_Ki;
;;;12     	Kd       = m_Kd;
;;;13     	Target   = m_Target;
;;;14     	Rpi      = m_Rpi;
;;;15     	Rii      = m_Rii;
;;;16     	Rdi      = m_Rdi;
;;;17     	Rpa      = m_Rpa;
;;;18     	Ria      = m_Ria;
;;;19     	Rda      = m_Rda;
;;;20     	Ti       = m_Ti;
;;;21     	Ta       = m_Ta;
;;;22     	DeadZone = m_DeadZone;
;;;23     	Out      = 0;
;;;24     	MODE     = 0;
;;;25     
;;;26     }
;;;27     void PIDBase::SetTarget(float target){
000000  ed800a08          VSTR     s0,[r0,#0x20]
000004  edc00a09          VSTR     s1,[r0,#0x24]
000008  ed801a0a          VSTR     s2,[r0,#0x28]
00000c  edc01a01          VSTR     s3,[r0,#4]
000010  ed802a0b          VSTR     s4,[r0,#0x2c]
000014  ed803a0c          VSTR     s6,[r0,#0x30]
000018  ed804a0d          VSTR     s8,[r0,#0x34]
00001c  edc02a0f          VSTR     s5,[r0,#0x3c]
000020  edc03a10          VSTR     s7,[r0,#0x40]
000024  edc04a11          VSTR     s9,[r0,#0x44]
000028  ed805a0e          VSTR     s10,[r0,#0x38]
00002c  edc05a12          VSTR     s11,[r0,#0x48]
000030  ed806a13          VSTR     s12,[r0,#0x4c]
000034  eddf6a04          VLDR     s13,|L24.72|
000038  edc06a03          VSTR     s13,[r0,#0xc]
00003c  eddf6a02          VLDR     s13,|L24.72|
000040  edc06a00          VSTR     s13,[r0,#0]
000044  4770              BX       lr
                          ENDP

000046  0000              DCW      0x0000
                  |L24.72|
000048  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN8FUZZYPID8FuzzyPIDEff||, CODE, READONLY, ALIGN=1

                  _ZN8FUZZYPID8FuzzyPIDEff PROC ; FUZZYPID::FuzzyPID(float, float)
;;;195    
;;;196    void FUZZYPID::FuzzyPID(float error,float errorC)
000000  b510              PUSH     {r4,lr}
;;;197    {
000002  ed2d8b08          VPUSH    {d8-d11}
000006  4604              MOV      r4,r0
000008  eeb09a40          VMOV.F32 s18,s0
00000c  eef0ba60          VMOV.F32 s23,s1
;;;198    	float Ux_S,Ux_M,Ux_B;
;;;199    	float kp,ki,kd;
;;;200    	Ux_S  = LAD_DOWN(myabs(error),this->NS_PS,this->NM_PM);
000010  edd41a1c          VLDR     s3,[r4,#0x70]
000014  eeb01a61          VMOV.F32 s2,s3
000018  edd41a1d          VLDR     s3,[r4,#0x74]
00001c  eef00a61          VMOV.F32 s1,s3
000020  eeb59ac0          VCMPE.F32 s18,#0.0
000024  eef1fa10          VMRS     APSR_nzcv,FPSCR
000028  dd02              BLE      |L25.48|
00002a  eef01a49          VMOV.F32 s3,s18
00002e  e001              B        |L25.52|
                  |L25.48|
000030  eef11a49          VNEG.F32 s3,s18
                  |L25.52|
000034  eeb00a61          VMOV.F32 s0,s3
000038  f7fffffe          BL       _Z8LAD_DOWNfff ; LAD_DOWN(float, float, float)
00003c  eeb08a40          VMOV.F32 s16,s0
;;;201    	Ux_M  = TRI(myabs(error),this->NS_PS,this->NM_PM,this->NB_PB);
000040  ed942a1b          VLDR     s4,[r4,#0x6c]
000044  eef01a42          VMOV.F32 s3,s4
000048  ed942a1c          VLDR     s4,[r4,#0x70]
00004c  eeb01a42          VMOV.F32 s2,s4
000050  ed942a1d          VLDR     s4,[r4,#0x74]
000054  eef00a42          VMOV.F32 s1,s4
000058  eeb59ac0          VCMPE.F32 s18,#0.0
00005c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000060  dd02              BLE      |L25.104|
000062  eeb02a49          VMOV.F32 s4,s18
000066  e001              B        |L25.108|
                  |L25.104|
000068  eeb12a49          VNEG.F32 s4,s18
                  |L25.108|
00006c  eeb00a42          VMOV.F32 s0,s4
000070  f7fffffe          BL       _Z3TRIffff ; TRI(float, float, float, float)
000074  eef08a40          VMOV.F32 s17,s0
;;;202    	Ux_B  = LAD_UP(myabs(error),this->NM_PM,this->NB_PB);
000078  edd41a1b          VLDR     s3,[r4,#0x6c]
00007c  eeb01a61          VMOV.F32 s2,s3
000080  edd41a1c          VLDR     s3,[r4,#0x70]
000084  eef00a61          VMOV.F32 s1,s3
000088  eeb59ac0          VCMPE.F32 s18,#0.0
00008c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000090  dd02              BLE      |L25.152|
000092  eef01a49          VMOV.F32 s3,s18
000096  e001              B        |L25.156|
                  |L25.152|
000098  eef11a49          VNEG.F32 s3,s18
                  |L25.156|
00009c  eeb00a61          VMOV.F32 s0,s3
0000a0  f7fffffe          BL       _Z6LAD_UPfff ; LAD_UP(float, float, float)
0000a4  eef09a40          VMOV.F32 s19,s0
;;;203    
;;;204    	// Ux_S  = LAD_DOWN(myabs(error),this->NS_PS,this->NM_PM);
;;;205    	// Ux_M  = TRI(myabs(error),this->NS_PS,this->NM_PM,this->NB_PB);
;;;206    	// Ux_B  = LAD_UP(myabs(error),this->NM_PM,this->NB_PB);
;;;207    
;;;208    	kp = (Ux_S * this->NS_PS_kp + Ux_M * this->NM_PM_kp + Ux_B * this->NB_PB_kp)/(Ux_S + Ux_M + Ux_B);
0000a8  ed940a20          VLDR     s0,[r4,#0x80]
0000ac  ee200a08          VMUL.F32 s0,s0,s16
0000b0  edd40a1f          VLDR     s1,[r4,#0x7c]
0000b4  ee080aa0          VMLA.F32 s0,s17,s1
0000b8  edd40a1e          VLDR     s1,[r4,#0x78]
0000bc  ee090aa0          VMLA.F32 s0,s19,s1
0000c0  ee780a28          VADD.F32 s1,s16,s17
0000c4  ee700aa9          VADD.F32 s1,s1,s19
0000c8  ee80aa20          VDIV.F32 s20,s0,s1
;;;209    	ki = (Ux_S * this->NS_PS_ki + Ux_M * this->NM_PM_ki + Ux_B * this->NB_PB_ki)/(Ux_S + Ux_M + Ux_B);
0000cc  ed940a23          VLDR     s0,[r4,#0x8c]
0000d0  ee200a08          VMUL.F32 s0,s0,s16
0000d4  edd40a22          VLDR     s1,[r4,#0x88]
0000d8  ee080aa0          VMLA.F32 s0,s17,s1
0000dc  edd40a21          VLDR     s1,[r4,#0x84]
0000e0  ee090aa0          VMLA.F32 s0,s19,s1
0000e4  ee780a28          VADD.F32 s1,s16,s17
0000e8  ee700aa9          VADD.F32 s1,s1,s19
0000ec  eec0aa20          VDIV.F32 s21,s0,s1
;;;210    	kd = (Ux_S * this->NS_PS_kd + Ux_M * this->NM_PM_kd + Ux_B * this->NB_PB_kd)/(Ux_S + Ux_M + Ux_B);
0000f0  ed940a26          VLDR     s0,[r4,#0x98]
0000f4  ee200a08          VMUL.F32 s0,s0,s16
0000f8  edd40a25          VLDR     s1,[r4,#0x94]
0000fc  ee080aa0          VMLA.F32 s0,s17,s1
000100  edd40a24          VLDR     s1,[r4,#0x90]
000104  ee090aa0          VMLA.F32 s0,s19,s1
000108  ee780a28          VADD.F32 s1,s16,s17
00010c  ee700aa9          VADD.F32 s1,s1,s19
000110  ee80ba20          VDIV.F32 s22,s0,s1
;;;211    
;;;212    //	kp = CLimitSlider_Filter(Kpfilter,5,kp,10000);//滤波
;;;213    //	ki = CLimitSlider_Filter(Kifilter,5,ki,10000);//滤波
;;;214    //	kd = CLimitSlider_Filter(Kdfilter,5,kd,10000);//滤波
;;;215    
;;;216    //	kp = Constrain(kp, 0.0f, this->NB_PB_kp);
;;;217    //	ki = Constrain(ki, 0.0f, this->NB_PB_ki);
;;;218    //	kd = Constrain(kd, 0.0f, this->NB_PB_kd);
;;;219    //	if(myabs(error) <= NS_PS)
;;;220    //	{
;;;221    //		kd = NS_PS_kd*errorC;
;;;222    //		kp = NS_PS_kp/errorC;
;;;223    //	}
;;;224    	SetPID(kp,ki,kd);
000114  eeb01a4b          VMOV.F32 s2,s22
000118  eef00a6a          VMOV.F32 s1,s21
00011c  eeb00a4a          VMOV.F32 s0,s20
000120  4620              MOV      r0,r4
000122  f7fffffe          BL       _ZN7PIDBase6SetPIDEfff ; PIDBase::SetPID(float, float, float)
;;;225    }
000126  ecbd8b08          VPOP     {d8-d11}
00012a  bd10              POP      {r4,pc}
;;;226    
                          ENDP


                          AREA ||i._ZN8FUZZYPID9AdjustPIDEv||, CODE, READONLY, ALIGN=2

                  _ZN8FUZZYPID9AdjustPIDEv PROC ; FUZZYPID::AdjustPID()
;;;254    
;;;255    void FUZZYPID::AdjustPID(void)
000000  b510              PUSH     {r4,lr}
;;;256    {
000002  4604              MOV      r4,r0
;;;257    	if(UpdataTimeStamp()) return;
000004  f104005c          ADD      r0,r4,#0x5c
000008  f7fffffe          BL       _ZN8PIDTimer15UpdataTimeStampEv ; PIDTimer::UpdataTimeStamp()
00000c  b100              CBZ      r0,|L26.16|
                  |L26.14|
;;;258    
;;;259    	now_error = Target - Current;
;;;260    	now_error = Slider_Filter(filterstruct.filterbuff[0],&filterstruct.num[0],5,now_error);
;;;261    	Omega = Slider_Filter(filterstruct.filterbuff[1],&filterstruct.num[1],5,Omega);
;;;262    
;;;263    	errorC = Kec*Omega/dt;
;;;264    	FuzzyPID(now_error,errorC);
;;;265    
;;;266    	//P
;;;267    	PTerm = Kp * now_error;
;;;268    	PTerm = Constrain(PTerm, Rpi, Rpa);
;;;269    
;;;270    	//I
;;;271    
;;;272    	ITerm +=  Ki * now_error * dt;
;;;273    	ITerm = Constrain(ITerm, Rii, Ria);
;;;274    
;;;275    	//D
;;;276    	DTerm =   Kd * (Omega - Omega_Offset);
;;;277    
;;;278    	Out = PTerm + ITerm + DTerm;
;;;279    	Out = Slider_Filter(filterstruct.filterbuff[2],&filterstruct.num[2],5,Out);//滤波，输出更加平滑
;;;280    	
;;;281    	if(myabs(now_error) <= DeadZone)
;;;282    	{
;;;283    		counter++;
;;;284    		if(counter >= 1024)
;;;285    			counter = 1024;
;;;286    	}
;;;287    	else
;;;288    	{
;;;289    		counter--;
;;;290    		if(counter <= 0)
;;;291    			counter = 0;
;;;292    	}
;;;293    	if(counter >= 1000)
;;;294    	{
;;;295    		Out = 0;
;;;296    		ITerm = 0;
;;;297    	}
;;;298    }
00000e  bd10              POP      {r4,pc}
                  |L26.16|
000010  ed940a01          VLDR     s0,[r4,#4]            ;259
000014  edd40a02          VLDR     s1,[r4,#8]            ;259
000018  ee300a60          VSUB.F32 s0,s0,s1              ;259
00001c  ed840a15          VSTR     s0,[r4,#0x54]         ;259
000020  edd40a15          VLDR     s1,[r4,#0x54]         ;260
000024  eeb00a60          VMOV.F32 s0,s1                 ;260
000028  2205              MOVS     r2,#5                 ;260
00002a  f10401a4          ADD      r1,r4,#0xa4           ;260
00002e  1d08              ADDS     r0,r1,#4              ;260
000030  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000034  ed840a15          VSTR     s0,[r4,#0x54]         ;260
000038  edd40a19          VLDR     s1,[r4,#0x64]         ;261
00003c  eeb00a60          VMOV.F32 s0,s1                 ;261
000040  2205              MOVS     r2,#5                 ;261
000042  f10401a5          ADD      r1,r4,#0xa5           ;261
000046  f10400bc          ADD      r0,r4,#0xbc           ;261
00004a  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
00004e  ed840a19          VSTR     s0,[r4,#0x64]         ;261
000052  ed940a28          VLDR     s0,[r4,#0xa0]         ;263
000056  edd40a19          VLDR     s1,[r4,#0x64]         ;263
00005a  ee200a20          VMUL.F32 s0,s0,s1              ;263
00005e  edd40a17          VLDR     s1,[r4,#0x5c]         ;263
000062  ee801a20          VDIV.F32 s2,s0,s1              ;263
000066  ed841a27          VSTR     s2,[r4,#0x9c]         ;263
00006a  ed941a27          VLDR     s2,[r4,#0x9c]         ;264
00006e  eef00a41          VMOV.F32 s1,s2                 ;264
000072  ed941a15          VLDR     s2,[r4,#0x54]         ;264
000076  eeb00a41          VMOV.F32 s0,s2                 ;264
00007a  4620              MOV      r0,r4                 ;264
00007c  f7fffffe          BL       _ZN8FUZZYPID8FuzzyPIDEff ; FUZZYPID::FuzzyPID(float, float)
000080  ed940a08          VLDR     s0,[r4,#0x20]         ;267
000084  edd40a15          VLDR     s1,[r4,#0x54]         ;267
000088  ee200a20          VMUL.F32 s0,s0,s1              ;267
00008c  ed840a05          VSTR     s0,[r4,#0x14]         ;267
000090  edd41a0f          VLDR     s3,[r4,#0x3c]         ;268
000094  eeb01a61          VMOV.F32 s2,s3                 ;268
000098  edd41a0b          VLDR     s3,[r4,#0x2c]         ;268
00009c  eef00a61          VMOV.F32 s1,s3                 ;268
0000a0  edd41a05          VLDR     s3,[r4,#0x14]         ;268
0000a4  eeb00a61          VMOV.F32 s0,s3                 ;268
0000a8  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
0000ac  ed840a05          VSTR     s0,[r4,#0x14]         ;268
0000b0  ed940a09          VLDR     s0,[r4,#0x24]         ;272
0000b4  edd40a15          VLDR     s1,[r4,#0x54]         ;272
0000b8  ee600a20          VMUL.F32 s1,s0,s1              ;272
0000bc  ed941a17          VLDR     s2,[r4,#0x5c]         ;272
0000c0  ed940a06          VLDR     s0,[r4,#0x18]         ;272
0000c4  ee000a81          VMLA.F32 s0,s1,s2              ;272
0000c8  ed840a06          VSTR     s0,[r4,#0x18]         ;272
0000cc  edd41a10          VLDR     s3,[r4,#0x40]         ;273
0000d0  eeb01a61          VMOV.F32 s2,s3                 ;273
0000d4  edd41a0c          VLDR     s3,[r4,#0x30]         ;273
0000d8  eef00a61          VMOV.F32 s1,s3                 ;273
0000dc  edd41a06          VLDR     s3,[r4,#0x18]         ;273
0000e0  eeb00a61          VMOV.F32 s0,s3                 ;273
0000e4  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
0000e8  ed840a06          VSTR     s0,[r4,#0x18]         ;273
0000ec  ed940a19          VLDR     s0,[r4,#0x64]         ;276
0000f0  edd40a1a          VLDR     s1,[r4,#0x68]         ;276
0000f4  ee300a60          VSUB.F32 s0,s0,s1              ;276
0000f8  edd40a0a          VLDR     s1,[r4,#0x28]         ;276
0000fc  ee200a20          VMUL.F32 s0,s0,s1              ;276
000100  ed840a07          VSTR     s0,[r4,#0x1c]         ;276
000104  ed940a05          VLDR     s0,[r4,#0x14]         ;278
000108  edd40a06          VLDR     s1,[r4,#0x18]         ;278
00010c  ee300a20          VADD.F32 s0,s0,s1              ;278
000110  edd40a07          VLDR     s1,[r4,#0x1c]         ;278
000114  ee300a20          VADD.F32 s0,s0,s1              ;278
000118  ed840a03          VSTR     s0,[r4,#0xc]          ;278
00011c  edd40a03          VLDR     s1,[r4,#0xc]          ;279
000120  eeb00a60          VMOV.F32 s0,s1                 ;279
000124  2205              MOVS     r2,#5                 ;279
000126  f10401a6          ADD      r1,r4,#0xa6           ;279
00012a  f10400d0          ADD      r0,r4,#0xd0           ;279
00012e  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000132  ed840a03          VSTR     s0,[r4,#0xc]          ;279
000136  ed940a15          VLDR     s0,[r4,#0x54]         ;281
00013a  eeb50ac0          VCMPE.F32 s0,#0.0               ;281
00013e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;281
000142  dd02              BLE      |L26.330|
000144  ed940a15          VLDR     s0,[r4,#0x54]         ;281
000148  e003              B        |L26.338|
                  |L26.330|
00014a  ed940a15          VLDR     s0,[r4,#0x54]         ;281
00014e  eeb10a40          VNEG.F32 s0,s0                 ;281
                  |L26.338|
000152  edd40a13          VLDR     s1,[r4,#0x4c]         ;281
000156  eeb40ae0          VCMPE.F32 s0,s1                 ;281
00015a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;281
00015e  d80e              BHI      |L26.382|
000160  f8340f50          LDRH     r0,[r4,#0x50]!        ;283
000164  1c40              ADDS     r0,r0,#1              ;283
000166  b200              SXTH     r0,r0                 ;283
000168  8020              STRH     r0,[r4,#0]            ;283
00016a  f9340950          LDRSH    r0,[r4],#-0x50        ;284
00016e  f5b06f80          CMP      r0,#0x400             ;284
000172  db10              BLT      |L26.406|
000174  f44f6080          MOV      r0,#0x400             ;285
000178  f8a40050          STRH     r0,[r4,#0x50]         ;285
00017c  e00b              B        |L26.406|
                  |L26.382|
00017e  f8340f50          LDRH     r0,[r4,#0x50]!        ;289
000182  1e40              SUBS     r0,r0,#1              ;289
000184  b200              SXTH     r0,r0                 ;289
000186  8020              STRH     r0,[r4,#0]            ;289
000188  f9340950          LDRSH    r0,[r4],#-0x50        ;290
00018c  2800              CMP      r0,#0                 ;290
00018e  dc02              BGT      |L26.406|
000190  2000              MOVS     r0,#0                 ;291
000192  f8a40050          STRH     r0,[r4,#0x50]         ;291
                  |L26.406|
000196  f9b40050          LDRSH    r0,[r4,#0x50]         ;293
00019a  f5b07f7a          CMP      r0,#0x3e8             ;293
00019e  db07              BLT      |L26.432|
0001a0  ed9f0a04          VLDR     s0,|L26.436|
0001a4  ed840a03          VSTR     s0,[r4,#0xc]          ;295
0001a8  ed9f0a02          VLDR     s0,|L26.436|
0001ac  ed840a06          VSTR     s0,[r4,#0x18]         ;296
                  |L26.432|
0001b0  bf00              NOP      
0001b2  e72c              B        |L26.14|
;;;299    
                          ENDP

                  |L26.436|
0001b4  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN8FUZZYPIDC1Efffffffffffffffffffffffff||, CODE, READONLY, ALIGN=2

                  _ZN8FUZZYPIDC2Efffffffffffffffffffffffff                  ; Alternate entry point ; FUZZYPID::FUZZYPID__sub_object(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
                  _ZN8FUZZYPIDC1Efffffffffffffffffffffffff PROC ; FUZZYPID::FUZZYPID(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
;;;227    
;;;228    FUZZYPID::FUZZYPID(float m_Kp, float m_Ki, float m_Kd, float m_Target,\
;;;229    		 float m_Rpi, float m_Rpa, float m_Rii, float m_Ria,\
;;;230    		 float m_Rdi, float m_Rda, float m_Ti, float m_Ta, float m_DeadZone,\
;;;231    		 float m_NB_PB, float m_NM_PM, float m_NS_PS,\
;;;232    		 float m_NB_PB_kp,float m_NM_PM_kp, float m_NS_PS_kp,\
;;;233    		 float m_NB_PB_ki,float m_NM_PM_ki, float m_NS_PS_ki,\
;;;234    		 float m_NB_PB_kd,float m_NM_PM_kd, float m_NS_PS_kd)
;;;235    		:PIDBase(m_Kp,m_Ki,m_Kd,m_Target,\
;;;236    				m_Rpi,m_Rpa,m_Rii,m_Ria,\
;;;237    				m_Rdi,m_Rda,m_Ti,m_Ta,m_DeadZone),
;;;238    		NB_PB (m_NB_PB),
;;;239    		NM_PM (m_NM_PM),
;;;240    		NS_PS (m_NS_PS),
;;;241    		NB_PB_kp (m_NB_PB_kp),
;;;242    		NM_PM_kp (m_NM_PM_kp),
;;;243    		NS_PS_kp (m_NS_PS_kp),
;;;244    		NB_PB_ki (m_NB_PB_ki),
;;;245    		NM_PM_ki (m_NM_PM_ki),
;;;246    		NS_PS_ki (m_NS_PS_ki),
;;;247    		NB_PB_kd (m_NB_PB_kd),
;;;248    		NM_PM_kd (m_NM_PM_kd),
;;;249    		NS_PS_kd (m_NS_PS_kd)
;;;250    		{
;;;251    			Kec = 0.00001f;
;;;252    		};
;;;253    
000000  b501              PUSH     {r0,lr}
000002  ed2d0b10          VPUSH    {d0-d7}
000006  ed2d8b10          VPUSH    {d8-d15}
00000a  4601              MOV      r1,r0
00000c  eef08a40          VMOV.F32 s17,s0
000010  eeb09a60          VMOV.F32 s18,s1
000014  eef09a41          VMOV.F32 s19,s2
000018  eeb0aa61          VMOV.F32 s20,s3
00001c  eef0aa42          VMOV.F32 s21,s4
000020  eeb0ba62          VMOV.F32 s22,s5
000024  eef0ba43          VMOV.F32 s23,s6
000028  eeb0ca63          VMOV.F32 s24,s7
00002c  eef0ca44          VMOV.F32 s25,s8
000030  eeb0da64          VMOV.F32 s26,s9
000034  eef0da45          VMOV.F32 s27,s10
000038  eef0fa65          VMOV.F32 s31,s11
00003c  eeb08a66          VMOV.F32 s16,s13
000040  ed9dea22          VLDR     s28,[sp,#0x88]
000044  edddea23          VLDR     s29,[sp,#0x8c]
000048  ed9dfa24          VLDR     s30,[sp,#0x90]
00004c  ed9d6a1c          VLDR     s12,[sp,#0x70]
000050  eef05a6f          VMOV.F32 s11,s31
000054  eeb05a6d          VMOV.F32 s10,s27
000058  eef04a4d          VMOV.F32 s9,s26
00005c  eeb04a6c          VMOV.F32 s8,s25
000060  eef03a4c          VMOV.F32 s7,s24
000064  eeb03a6b          VMOV.F32 s6,s23
000068  eef02a4b          VMOV.F32 s5,s22
00006c  eeb02a6a          VMOV.F32 s4,s21
000070  eef01a4a          VMOV.F32 s3,s20
000074  eeb01a69          VMOV.F32 s2,s19
000078  eef00a49          VMOV.F32 s1,s18
00007c  eeb00a68          VMOV.F32 s0,s17
000080  4608              MOV      r0,r1
000082  f7fffffe          BL       _ZN7PIDBaseC1Efffffffffffff ; PIDBase::PIDBase(float, float, float, float, float, float, float, float, float, float, float, float, float)
000086  4601              MOV      r1,r0
000088  ed818a1b          VSTR     s16,[r1,#0x6c]
00008c  ed817a1c          VSTR     s14,[r1,#0x70]
000090  edc17a1d          VSTR     s15,[r1,#0x74]
000094  ed81ea1e          VSTR     s28,[r1,#0x78]
000098  edc1ea1f          VSTR     s29,[r1,#0x7c]
00009c  ed81fa20          VSTR     s30,[r1,#0x80]
0000a0  ed9d0a25          VLDR     s0,[sp,#0x94]
0000a4  ed810a21          VSTR     s0,[r1,#0x84]
0000a8  ed9d0a26          VLDR     s0,[sp,#0x98]
0000ac  ed810a22          VSTR     s0,[r1,#0x88]
0000b0  ed9d0a27          VLDR     s0,[sp,#0x9c]
0000b4  ed810a23          VSTR     s0,[r1,#0x8c]
0000b8  ed9d0a28          VLDR     s0,[sp,#0xa0]
0000bc  ed810a24          VSTR     s0,[r1,#0x90]
0000c0  ed9d0a29          VLDR     s0,[sp,#0xa4]
0000c4  ed810a25          VSTR     s0,[r1,#0x94]
0000c8  ed9d0a2a          VLDR     s0,[sp,#0xa8]
0000cc  ed810a26          VSTR     s0,[r1,#0x98]
0000d0  ed9f0a04          VLDR     s0,|L27.228|
0000d4  ed810a28          VSTR     s0,[r1,#0xa0]
0000d8  4608              MOV      r0,r1
0000da  ecbd8b10          VPOP     {d8-d15}
0000de  b011              ADD      sp,sp,#0x44
0000e0  bd00              POP      {pc}
                          ENDP

0000e2  0000              DCW      0x0000
                  |L27.228|
0000e4  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06

                          AREA ||i._ZN8PIDTimer15UpdataTimeStampEv||, CODE, READONLY, ALIGN=2

                  _ZN8PIDTimer15UpdataTimeStampEv PROC ; PIDTimer::UpdataTimeStamp()
;;;69     
;;;70     unsigned char PIDTimer::UpdataTimeStamp(void)
000000  4601              MOV      r1,r0
;;;71     {
;;;72     	u32 now_time;
;;;73     
;;;74     	//系统时间的获取
;;;75     	if(last_time == 0)
000002  6848              LDR      r0,[r1,#4]
000004  b920              CBNZ     r0,|L28.16|
;;;76     	{
;;;77     		last_time = micros();
000006  4814              LDR      r0,|L28.88|
000008  6800              LDR      r0,[r0,#0]
00000a  6048              STR      r0,[r1,#4]
;;;78     		return 1;
00000c  2001              MOVS     r0,#1
                  |L28.14|
;;;79     	}
;;;80     	now_time = micros();
;;;81     
;;;82     	if(now_time < last_time)
;;;83     	{
;;;84     	  	dt = (float)(now_time + (0xFFFFFFFF - last_time) );
;;;85     	}
;;;86     	else
;;;87     	{
;;;88     		dt = (float)(now_time - last_time);
;;;89     
;;;90     	}
;;;91     
;;;92       	last_time = now_time ;
;;;93     
;;;94     	dt /= 1000000.0f;
;;;95     
;;;96     	return 0;
;;;97     
;;;98     }
00000e  4770              BX       lr
                  |L28.16|
000010  4811              LDR      r0,|L28.88|
000012  6802              LDR      r2,[r0,#0]            ;80
000014  6848              LDR      r0,[r1,#4]            ;82
000016  4290              CMP      r0,r2                 ;82
000018  d90a              BLS      |L28.48|
00001a  6848              LDR      r0,[r1,#4]            ;84
00001c  f1c030ff          RSB      r0,r0,#0xffffffff     ;84
000020  4410              ADD      r0,r0,r2              ;84
000022  ee000a10          VMOV     s0,r0                 ;84
000026  eeb80a40          VCVT.F32.U32 s0,s0                 ;84
00002a  ed810a00          VSTR     s0,[r1,#0]            ;84
00002e  e007              B        |L28.64|
                  |L28.48|
000030  6848              LDR      r0,[r1,#4]            ;88
000032  1a10              SUBS     r0,r2,r0              ;88
000034  ee000a10          VMOV     s0,r0                 ;88
000038  eeb80a40          VCVT.F32.U32 s0,s0                 ;88
00003c  ed810a00          VSTR     s0,[r1,#0]            ;88
                  |L28.64|
000040  604a              STR      r2,[r1,#4]            ;92
000042  ed910a00          VLDR     s0,[r1,#0]            ;94
000046  eddf0a05          VLDR     s1,|L28.92|
00004a  ee801a20          VDIV.F32 s2,s0,s1              ;94
00004e  ed811a00          VSTR     s2,[r1,#0]            ;94
000052  2000              MOVS     r0,#0                 ;96
000054  e7db              B        |L28.14|
;;;99     
                          ENDP

000056  0000              DCW      0x0000
                  |L28.88|
                          DCD      0x40000c24
                  |L28.92|
00005c  49742400          DCFS     0x49742400 ; 1000000

                          AREA ||i._ZN9FUZZYSPID9AdjustPIDEv||, CODE, READONLY, ALIGN=2

                  _ZN9FUZZYSPID9AdjustPIDEv PROC ; FUZZYSPID::AdjustPID()
;;;300    
;;;301    void FUZZYSPID::AdjustPID(void)
000000  b510              PUSH     {r4,lr}
;;;302    {
000002  4604              MOV      r4,r0
;;;303    	if(UpdataTimeStamp()) return;
000004  f104005c          ADD      r0,r4,#0x5c
000008  f7fffffe          BL       _ZN8PIDTimer15UpdataTimeStampEv ; PIDTimer::UpdataTimeStamp()
00000c  b100              CBZ      r0,|L29.16|
                  |L29.14|
;;;304    
;;;305    	last_error = now_error;
;;;306    	now_error = Target - Current;
;;;307    	now_error = Slider_Filter(filterstruct.filterbuff[0],&filterstruct.num[0],5,now_error);
;;;308    
;;;309    	errorC = Kec*Omega/dt;
;;;310    	FuzzyPID(now_error,errorC);
;;;311    
;;;312    	//P
;;;313    	PTerm = Kp * now_error;
;;;314    	PTerm = Constrain(PTerm, Rpi, Rpa);
;;;315    
;;;316    	//I
;;;317    
;;;318    	ITerm +=  Ki * now_error * dt;
;;;319    	ITerm = Constrain(ITerm, Rii, Ria);
;;;320    
;;;321    	//D
;;;322    	DTerm =   Kd * (now_error - last_error)/dt;
;;;323    	DTerm = Constrain(DTerm, Rdi, Rda);
;;;324    	DTerm = Slider_Filter(filterstruct.filterbuff[1],&filterstruct.num[1],5,DTerm);//滤波，输出更加平滑
;;;325    	
;;;326    	Out = PTerm + ITerm + DTerm;
;;;327    	Out = Slider_Filter(filterstruct.filterbuff[2],&filterstruct.num[2],5,Out);//滤波，输出更加平滑
;;;328    	
;;;329    	if(myabs(now_error) <= DeadZone)
;;;330    	{
;;;331    		counter++;
;;;332    		if(counter >= 1024)
;;;333    			counter = 1024;
;;;334    	}
;;;335    	else
;;;336    	{
;;;337    		counter--;
;;;338    		if(counter <= 0)
;;;339    			counter = 0;
;;;340    	}
;;;341    	if(counter >= 1000)
;;;342    	{
;;;343    		Out = 0;
;;;344    		ITerm = 0;
;;;345    	}
;;;346    }
00000e  bd10              POP      {r4,pc}
                  |L29.16|
000010  ed940a15          VLDR     s0,[r4,#0x54]         ;305
000014  ed840a16          VSTR     s0,[r4,#0x58]         ;305
000018  ed940a01          VLDR     s0,[r4,#4]            ;306
00001c  edd40a02          VLDR     s1,[r4,#8]            ;306
000020  ee300a60          VSUB.F32 s0,s0,s1              ;306
000024  ed840a15          VSTR     s0,[r4,#0x54]         ;306
000028  edd40a15          VLDR     s1,[r4,#0x54]         ;307
00002c  eeb00a60          VMOV.F32 s0,s1                 ;307
000030  2205              MOVS     r2,#5                 ;307
000032  f10401e4          ADD      r1,r4,#0xe4           ;307
000036  1d08              ADDS     r0,r1,#4              ;307
000038  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
00003c  ed840a15          VSTR     s0,[r4,#0x54]         ;307
000040  ed940a28          VLDR     s0,[r4,#0xa0]         ;309
000044  edd40a19          VLDR     s1,[r4,#0x64]         ;309
000048  ee200a20          VMUL.F32 s0,s0,s1              ;309
00004c  edd40a17          VLDR     s1,[r4,#0x5c]         ;309
000050  ee801a20          VDIV.F32 s2,s0,s1              ;309
000054  ed841a27          VSTR     s2,[r4,#0x9c]         ;309
000058  ed941a27          VLDR     s2,[r4,#0x9c]         ;310
00005c  eef00a41          VMOV.F32 s1,s2                 ;310
000060  ed941a15          VLDR     s2,[r4,#0x54]         ;310
000064  eeb00a41          VMOV.F32 s0,s2                 ;310
000068  4620              MOV      r0,r4                 ;310
00006a  f7fffffe          BL       _ZN8FUZZYPID8FuzzyPIDEff ; FUZZYPID::FuzzyPID(float, float)
00006e  ed940a08          VLDR     s0,[r4,#0x20]         ;313
000072  edd40a15          VLDR     s1,[r4,#0x54]         ;313
000076  ee200a20          VMUL.F32 s0,s0,s1              ;313
00007a  ed840a05          VSTR     s0,[r4,#0x14]         ;313
00007e  edd41a0f          VLDR     s3,[r4,#0x3c]         ;314
000082  eeb01a61          VMOV.F32 s2,s3                 ;314
000086  edd41a0b          VLDR     s3,[r4,#0x2c]         ;314
00008a  eef00a61          VMOV.F32 s1,s3                 ;314
00008e  edd41a05          VLDR     s3,[r4,#0x14]         ;314
000092  eeb00a61          VMOV.F32 s0,s3                 ;314
000096  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
00009a  ed840a05          VSTR     s0,[r4,#0x14]         ;314
00009e  ed940a09          VLDR     s0,[r4,#0x24]         ;318
0000a2  edd40a15          VLDR     s1,[r4,#0x54]         ;318
0000a6  ee600a20          VMUL.F32 s1,s0,s1              ;318
0000aa  ed941a17          VLDR     s2,[r4,#0x5c]         ;318
0000ae  ed940a06          VLDR     s0,[r4,#0x18]         ;318
0000b2  ee000a81          VMLA.F32 s0,s1,s2              ;318
0000b6  ed840a06          VSTR     s0,[r4,#0x18]         ;318
0000ba  edd41a10          VLDR     s3,[r4,#0x40]         ;319
0000be  eeb01a61          VMOV.F32 s2,s3                 ;319
0000c2  edd41a0c          VLDR     s3,[r4,#0x30]         ;319
0000c6  eef00a61          VMOV.F32 s1,s3                 ;319
0000ca  edd41a06          VLDR     s3,[r4,#0x18]         ;319
0000ce  eeb00a61          VMOV.F32 s0,s3                 ;319
0000d2  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
0000d6  ed840a06          VSTR     s0,[r4,#0x18]         ;319
0000da  ed940a15          VLDR     s0,[r4,#0x54]         ;322
0000de  edd40a16          VLDR     s1,[r4,#0x58]         ;322
0000e2  ee300a60          VSUB.F32 s0,s0,s1              ;322
0000e6  edd40a0a          VLDR     s1,[r4,#0x28]         ;322
0000ea  ee200a20          VMUL.F32 s0,s0,s1              ;322
0000ee  edd40a17          VLDR     s1,[r4,#0x5c]         ;322
0000f2  ee801a20          VDIV.F32 s2,s0,s1              ;322
0000f6  ed841a07          VSTR     s2,[r4,#0x1c]         ;322
0000fa  edd41a11          VLDR     s3,[r4,#0x44]         ;323
0000fe  eeb01a61          VMOV.F32 s2,s3                 ;323
000102  edd41a0d          VLDR     s3,[r4,#0x34]         ;323
000106  eef00a61          VMOV.F32 s1,s3                 ;323
00010a  edd41a07          VLDR     s3,[r4,#0x1c]         ;323
00010e  eeb00a61          VMOV.F32 s0,s3                 ;323
000112  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
000116  ed840a07          VSTR     s0,[r4,#0x1c]         ;323
00011a  edd40a07          VLDR     s1,[r4,#0x1c]         ;324
00011e  eeb00a60          VMOV.F32 s0,s1                 ;324
000122  2205              MOVS     r2,#5                 ;324
000124  f10401e5          ADD      r1,r4,#0xe5           ;324
000128  f10400fc          ADD      r0,r4,#0xfc           ;324
00012c  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000130  ed840a07          VSTR     s0,[r4,#0x1c]         ;324
000134  ed940a05          VLDR     s0,[r4,#0x14]         ;326
000138  edd40a06          VLDR     s1,[r4,#0x18]         ;326
00013c  ee300a20          VADD.F32 s0,s0,s1              ;326
000140  edd40a07          VLDR     s1,[r4,#0x1c]         ;326
000144  ee300a20          VADD.F32 s0,s0,s1              ;326
000148  ed840a03          VSTR     s0,[r4,#0xc]          ;326
00014c  edd40a03          VLDR     s1,[r4,#0xc]          ;327
000150  eeb00a60          VMOV.F32 s0,s1                 ;327
000154  2205              MOVS     r2,#5                 ;327
000156  f10401e6          ADD      r1,r4,#0xe6           ;327
00015a  f5047088          ADD      r0,r4,#0x110          ;327
00015e  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000162  ed840a03          VSTR     s0,[r4,#0xc]          ;327
000166  ed940a15          VLDR     s0,[r4,#0x54]         ;329
00016a  eeb50ac0          VCMPE.F32 s0,#0.0               ;329
00016e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;329
000172  dd02              BLE      |L29.378|
000174  ed940a15          VLDR     s0,[r4,#0x54]         ;329
000178  e003              B        |L29.386|
                  |L29.378|
00017a  ed940a15          VLDR     s0,[r4,#0x54]         ;329
00017e  eeb10a40          VNEG.F32 s0,s0                 ;329
                  |L29.386|
000182  edd40a13          VLDR     s1,[r4,#0x4c]         ;329
000186  eeb40ae0          VCMPE.F32 s0,s1                 ;329
00018a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;329
00018e  d80e              BHI      |L29.430|
000190  f8340f50          LDRH     r0,[r4,#0x50]!        ;331
000194  1c40              ADDS     r0,r0,#1              ;331
000196  b200              SXTH     r0,r0                 ;331
000198  8020              STRH     r0,[r4,#0]            ;331
00019a  f9340950          LDRSH    r0,[r4],#-0x50        ;332
00019e  f5b06f80          CMP      r0,#0x400             ;332
0001a2  db10              BLT      |L29.454|
0001a4  f44f6080          MOV      r0,#0x400             ;333
0001a8  f8a40050          STRH     r0,[r4,#0x50]         ;333
0001ac  e00b              B        |L29.454|
                  |L29.430|
0001ae  f8340f50          LDRH     r0,[r4,#0x50]!        ;337
0001b2  1e40              SUBS     r0,r0,#1              ;337
0001b4  b200              SXTH     r0,r0                 ;337
0001b6  8020              STRH     r0,[r4,#0]            ;337
0001b8  f9340950          LDRSH    r0,[r4],#-0x50        ;338
0001bc  2800              CMP      r0,#0                 ;338
0001be  dc02              BGT      |L29.454|
0001c0  2000              MOVS     r0,#0                 ;339
0001c2  f8a40050          STRH     r0,[r4,#0x50]         ;339
                  |L29.454|
0001c6  f9b40050          LDRSH    r0,[r4,#0x50]         ;341
0001ca  f5b07f7a          CMP      r0,#0x3e8             ;341
0001ce  db07              BLT      |L29.480|
0001d0  ed9f0a04          VLDR     s0,|L29.484|
0001d4  ed840a03          VSTR     s0,[r4,#0xc]          ;343
0001d8  ed9f0a02          VLDR     s0,|L29.484|
0001dc  ed840a06          VSTR     s0,[r4,#0x18]         ;344
                  |L29.480|
0001e0  bf00              NOP      
0001e2  e714              B        |L29.14|
;;;347    
                          ENDP

                  |L29.484|
0001e4  00000000          DCFS     0x00000000 ; 0

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z3TRIffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z3TRIffff||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._Z8LAD_DOWNfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8LAD_DOWNfff||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._Z6LAD_UPfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z6LAD_UPfff||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._Z21Target_parameter_initP6TARGET||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z21Target_parameter_initP6TARGET||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._Z15PID_InitYAW_VELP3PIDfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15PID_InitYAW_VELP3PIDfff||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._Z16PID_InitROLL_VELP3PIDfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16PID_InitROLL_VELP3PIDfff||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._Z17PID_InitPITCH_VELP3PIDfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z17PID_InitPITCH_VELP3PIDfff||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._Z11PID_InitYAWP3PIDfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11PID_InitYAWP3PIDfff||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._Z12PID_InitROLLP3PIDfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12PID_InitROLLP3PIDfff||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i._Z13PID_InitPITCHP3PIDfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13PID_InitPITCHP3PIDfff||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i._Z11Rcdata_InitP2RC||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z11Rcdata_InitP2RC||
                          DCD      0x00000001

                          AREA ||area_number.41||, LINKORDER=||i._Z16ControlTask_Initv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16ControlTask_Initv||
                          DCD      0x00000001

                          AREA ||area_number.42||, LINKORDER=||i._Z23Pidcontrol_Altitude_VELP6TARGETP5EULLAP11Data_To_ImuPff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.42||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z23Pidcontrol_Altitude_VELP6TARGETP5EULLAP11Data_To_ImuPff||
                          DCD      0x00000001

                          AREA ||area_number.43||, LINKORDER=||i._ZN7PIDBaseC1Efffffffffffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.43||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBaseC1Efffffffffffff||
                          DCD      0x00000001

                          AREA ||area_number.44||, LINKORDER=||i._ZN7PIDBase9SetTargetEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.44||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase9SetTargetEf||
                          DCD      0x00000001

                          AREA ||area_number.45||, LINKORDER=||i._ZN7PIDBase10SetCurrentEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.45||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase10SetCurrentEf||
                          DCD      0x00000001

                          AREA ||area_number.46||, LINKORDER=||i._ZN7PIDBase6SetPIDEfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.46||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase6SetPIDEfff||
                          DCD      0x00000001

                          AREA ||area_number.47||, LINKORDER=||i._ZN7PIDBase15SetTargetMaxMinEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.47||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase15SetTargetMaxMinEff||
                          DCD      0x00000001

                          AREA ||area_number.48||, LINKORDER=||i._ZN7PIDBase10SetPMaxMinEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.48||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase10SetPMaxMinEff||
                          DCD      0x00000001

                          AREA ||area_number.49||, LINKORDER=||i._ZN7PIDBase10SetIMaxMinEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.49||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase10SetIMaxMinEff||
                          DCD      0x00000001

                          AREA ||area_number.50||, LINKORDER=||i._ZN7PIDBase10SetDMaxMinEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase10SetDMaxMinEff||
                          DCD      0x00000001

                          AREA ||area_number.51||, LINKORDER=||i._ZN7PIDBase11SetDeadZoneEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.51||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase11SetDeadZoneEf||
                          DCD      0x00000001

                          AREA ||area_number.52||, LINKORDER=||i._ZN8PIDTimer15UpdataTimeStampEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.52||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN8PIDTimer15UpdataTimeStampEv||
                          DCD      0x00000001

                          AREA ||area_number.53||, LINKORDER=||i._ZN8FUZZYPIDC1Efffffffffffffffffffffffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.53||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN8FUZZYPIDC1Efffffffffffffffffffffffff||
                          DCD      0x00000001

                          AREA ||area_number.54||, LINKORDER=||i._ZN8FUZZYPID8FuzzyPIDEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.54||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN8FUZZYPID8FuzzyPIDEff||
                          DCD      0x00000001

                          AREA ||area_number.55||, LINKORDER=||i._ZN8FUZZYPID9AdjustPIDEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.55||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN8FUZZYPID9AdjustPIDEv||
                          DCD      0x00000001

                          AREA ||area_number.56||, LINKORDER=||i._ZN9FUZZYSPID9AdjustPIDEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.56||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9FUZZYSPID9AdjustPIDEv||
                          DCD      0x00000001

                          AREA ||area_number.57||, LINKORDER=||i._ZN4CPID9AdjustPIDEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.57||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4CPID9AdjustPIDEv||
                          DCD      0x00000001

                          AREA ||area_number.58||, LINKORDER=||i._ZN5SCPID9AdjustPIDEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5SCPID9AdjustPIDEv||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Target
                          %        24
                  Rcdata
                          %        24
                  Pitchpid
                          %        36
                  Rollpid
                          %        36
                  Yawpid
                          %        36
                  Gyropitchpid
                          %        36
                  Gyrorollpid
                          %        36
                  Gyroyawpid
                          %        36

                          AREA ||t._Z9ConstrainIfET_S0_S0_S0_||, COMGROUP=_Z9ConstrainIfET_S0_S0_S0_, CODE, READONLY, ALIGN=1

                  _Z9ConstrainIfET_S0_S0_S0_ PROC ; T1 Constrain<float>(T1, T1, T1)
;;;21     template<class Type>
;;;22     Type Constrain(Type input,Type min,Type max){
000000  eef01a40          VMOV.F32 s3,s0
;;;23     if (input <= min)
000004  eef41ae0          VCMPE.F32 s3,s1
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  d802              BHI      |L194.20|
;;;24     	return min;
00000e  eeb00a60          VMOV.F32 s0,s1
                  |L194.18|
;;;25     else if(input >= max)
;;;26     	return max;
;;;27     else return input;
;;;28     }
000012  4770              BX       lr
                  |L194.20|
000014  eef41ac1          VCMPE.F32 s3,s2                 ;25
000018  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;25
00001c  db02              BLT      |L194.36|
00001e  eeb00a41          VMOV.F32 s0,s2                 ;26
000022  e7f6              B        |L194.18|
                  |L194.36|
000024  eeb00a61          VMOV.F32 s0,s3                 ;27
000028  e7f3              B        |L194.18|
;;;29     
                          ENDP


                          AREA ||area_number.195||, COMGROUP=_Z9ConstrainIfET_S0_S0_S0_, LINKORDER=||t._Z9ConstrainIfET_S0_S0_S0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.195||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._Z9ConstrainIfET_S0_S0_S0_||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\..\\MySrc\\cpid.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_cpid_cpp_9305d724___Z7__REV16j|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_cpid_cpp_9305d724___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_cpid_cpp_9305d724___Z7__REVSHi|
#line 144
|__asm___8_cpid_cpp_9305d724___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_cpid_cpp_9305d724___Z5__RRXj|
#line 300
|__asm___8_cpid_cpp_9305d724___Z5__RRXj| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
