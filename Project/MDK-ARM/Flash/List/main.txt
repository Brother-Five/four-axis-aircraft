; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -D_RTE_ -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 --omf_browse=.\flash\obj\main.crf ..\..\User\main.cpp]
                          THUMB

                          AREA ||i._Z12AppObjCreatev||, CODE, READONLY, ALIGN=2

                  _Z12AppObjCreatev PROC ; AppObjCreate()
;;;526     */
;;;527    static void AppObjCreate (void)
000000  b510              PUSH     {r4,lr}
;;;528    {
;;;529    	/* 创建消息邮箱 */
;;;530    	DR16_mailbox_init();//DR16邮箱初始化
000002  f7fffffe          BL       DR16_mailbox_init
;;;531    
;;;532    	/* 相关初始化 */
;;;533    	delay_ms(100);
000006  2064              MOVS     r0,#0x64
000008  f8dfc004          LDR      r12,|L1.16|
00000c  df00              SVC      #0x0
;;;534    //	Motor_Init(0xf1,0);
;;;535    
;;;536    }
00000e  bd10              POP      {r4,pc}
;;;537    
                          ENDP

                  |L1.16|
                          DCD      rt_dly_wait

                          AREA ||i._Z13AppTaskCreatev||, CODE, READONLY, ALIGN=2

                  _Z13AppTaskCreatev PROC ; AppTaskCreate()
;;;479     */
;;;480    static void AppTaskCreate (void)
000000  2300              MOVS     r3,#0
;;;481    {
;;;482    //HandleDEBUG_DATA = os_tsk_create_user(DEBUG_DATA,             /* 任务函数 */
;;;483    //	                                      3,                         /* 任务优先级 */
;;;484    //	                                      &DEBUG_DATAStk,         /* 任务栈 */
;;;485    //	                                      sizeof(DEBUG_DATAStk)); /* 任务栈大小，单位字节数 */
;;;486    
;;;487    	HandleDisconnectCheck = os_tsk_create_user(DisconnectCheck,             /* 任务函数 */
000002  4a22              LDR      r2,|L2.140|
000004  4922              LDR      r1,|L2.144|
000006  4823              LDR      r0,|L2.148|
000008  f8dfc08c          LDR      r12,|L2.152|
00000c  df00              SVC      #0x0
00000e  4923              LDR      r1,|L2.156|
000010  6008              STR      r0,[r1,#0]  ; HandleDisconnectCheck
;;;488    	                                      3,                         /* 任务优先级 */
;;;489    	                                      &DisconnectCheckStk,         /* 任务栈 */
;;;490    	                                      sizeof(DisconnectCheckStk)); /* 任务栈大小，单位字节数 */
;;;491    	HandleDR16_DATA_Rec = os_tsk_create_user(DR16_DATA_Rec,              /* 任务函数 */
000012  2300              MOVS     r3,#0
000014  4a22              LDR      r2,|L2.160|
000016  f04f1102          MOV      r1,#0x20002
00001a  4822              LDR      r0,|L2.164|
00001c  f8dfc078          LDR      r12,|L2.152|
000020  df00              SVC      #0x0
000022  4921              LDR      r1,|L2.168|
000024  6008              STR      r0,[r1,#0]  ; HandleDR16_DATA_Rec
;;;492    	                                   2,                       /* 任务优先级 */
;;;493    	                                   &DR16_DATA_RecStk,          /* 任务栈 */
;;;494    	                                   sizeof(DR16_DATA_RecStk));  /* 任务栈大小，单位字节数 */
;;;495    	HandlePitchYaw_Aguest = os_tsk_create_user(PitchYaw_Aguest,              /* 任务函数 */
000026  2300              MOVS     r3,#0
000028  4a20              LDR      r2,|L2.172|
00002a  4921              LDR      r1,|L2.176|
00002c  4821              LDR      r0,|L2.180|
00002e  f8dfc068          LDR      r12,|L2.152|
000032  df00              SVC      #0x0
000034  4920              LDR      r1,|L2.184|
000036  6008              STR      r0,[r1,#0]  ; HandlePitchYaw_Aguest
;;;496    	                                   2,                       /* 任务优先级 */
;;;497    	                                   &PitchYaw_AguestStk,          /* 任务栈 */
;;;498    	                                   sizeof(PitchYaw_AguestStk));  /* 任务栈大小，单位字节数 */
;;;499    
;;;500    	HandleAHRS_Update_Aguest = os_tsk_create_user(AHRS_Update_Aguest,              /* 任务函数 */
000038  2300              MOVS     r3,#0
00003a  4a20              LDR      r2,|L2.188|
00003c  f04f1102          MOV      r1,#0x20002
000040  481f              LDR      r0,|L2.192|
000042  f8dfc054          LDR      r12,|L2.152|
000046  df00              SVC      #0x0
000048  491e              LDR      r1,|L2.196|
00004a  6008              STR      r0,[r1,#0]  ; HandleAHRS_Update_Aguest
;;;501    	                                   2,                       /* 任务优先级 */
;;;502    	                                   &AHRS_Update_AguestStk,          /* 任务栈 */
;;;503    	                                   sizeof(AHRS_Update_AguestStk));  /* 任务栈大小，单位字节数 */
;;;504    //	
;;;505    //		HandleDR16_SxValue = os_tsk_create_user(DR16_SxValue,             /* 任务函数 */
;;;506    //	                                      6,                         /* 任务优先级 */
;;;507    //	                                      &DR16_SxValueStk,         /* 任务栈 */
;;;508    //	                                      sizeof(DR16_SxValueStk)); /* 任务栈大小，单位字节数 */
;;;509    
;;;510    	HandleImu_data_Aguest = os_tsk_create_user(Imu_data_Aguest,              /* 任务函数 */
00004c  2300              MOVS     r3,#0
00004e  4a1e              LDR      r2,|L2.200|
000050  f04f1102          MOV      r1,#0x20002
000054  481d              LDR      r0,|L2.204|
000056  f8dfc040          LDR      r12,|L2.152|
00005a  df00              SVC      #0x0
00005c  491c              LDR      r1,|L2.208|
00005e  6008              STR      r0,[r1,#0]  ; HandleImu_data_Aguest
;;;511    	                                   2,                       /* 任务优先级 */
;;;512    	                                   &Imu_data_AguestStk,          /* 任务栈 */
;;;513    	                                   sizeof(Imu_data_AguestStk));  /* 任务栈大小，单位字节数 */
;;;514    	HandleBoot_Sequence = os_tsk_create_user(Boot_Sequence,             /* 任务函数 */
000060  2300              MOVS     r3,#0
000062  4a1c              LDR      r2,|L2.212|
000064  f04f1102          MOV      r1,#0x20002
000068  481b              LDR      r0,|L2.216|
00006a  f8dfc02c          LDR      r12,|L2.152|
00006e  df00              SVC      #0x0
000070  491a              LDR      r1,|L2.220|
000072  6008              STR      r0,[r1,#0]  ; HandleBoot_Sequence
;;;515                                          2,                         /* 任务优先级 */
;;;516                                          &Boot_SequenceStk,         /* 任务栈 */
;;;517                                          sizeof(Boot_SequenceStk)); /* 任务栈大小，单位字节数 */
;;;518    	HandlePWM_Task = os_tsk_create_user(PWM_Task,             /* 任务函数 */
000074  2300              MOVS     r3,#0
000076  4a1a              LDR      r2,|L2.224|
000078  4905              LDR      r1,|L2.144|
00007a  1e89              SUBS     r1,r1,#2
00007c  4819              LDR      r0,|L2.228|
00007e  f8dfc018          LDR      r12,|L2.152|
000082  df00              SVC      #0x0
000084  4918              LDR      r1,|L2.232|
000086  6008              STR      r0,[r1,#0]  ; HandlePWM_Task
;;;519    								 1,                         /* 任务优先级 */
;;;520    								  &PWM_TaskStk,         /* 任务栈 */
;;;521    								  sizeof(PWM_TaskStk)); /* 任务栈大小，单位字节数 */
;;;522    }
000088  4770              BX       lr
;;;523    
                          ENDP

00008a  0000              DCW      0x0000
                  |L2.140|
                          DCD      DisconnectCheckStk
                  |L2.144|
                          DCD      0x00020003
                  |L2.148|
                          DCD      _Z15DisconnectCheckv ; DisconnectCheck()
                  |L2.152|
                          DCD      rt_tsk_create
                  |L2.156|
                          DCD      HandleDisconnectCheck
                  |L2.160|
                          DCD      DR16_DATA_RecStk
                  |L2.164|
                          DCD      _Z13DR16_DATA_Recv ; DR16_DATA_Rec()
                  |L2.168|
                          DCD      HandleDR16_DATA_Rec
                  |L2.172|
                          DCD      PitchYaw_AguestStk
                  |L2.176|
                          DCD      0x00040002
                  |L2.180|
                          DCD      _Z15PitchYaw_Aguestv ; PitchYaw_Aguest()
                  |L2.184|
                          DCD      HandlePitchYaw_Aguest
                  |L2.188|
                          DCD      AHRS_Update_AguestStk
                  |L2.192|
                          DCD      _Z18AHRS_Update_Aguestv ; AHRS_Update_Aguest()
                  |L2.196|
                          DCD      HandleAHRS_Update_Aguest
                  |L2.200|
                          DCD      Imu_data_AguestStk
                  |L2.204|
                          DCD      _Z15Imu_data_Aguestv ; Imu_data_Aguest()
                  |L2.208|
                          DCD      HandleImu_data_Aguest
                  |L2.212|
                          DCD      Boot_SequenceStk
                  |L2.216|
                          DCD      _Z13Boot_Sequencev ; Boot_Sequence()
                  |L2.220|
                          DCD      HandleBoot_Sequence
                  |L2.224|
                          DCD      PWM_TaskStk
                  |L2.228|
                          DCD      _Z8PWM_Taskv ; PWM_Task()
                  |L2.232|
                          DCD      HandlePWM_Task

                          AREA ||i._Z13Boot_Sequencev||, CODE, READONLY, ALIGN=2

                  _Z13Boot_Sequencev PROC ; Boot_Sequence()
;;;463     */
;;;464    __task void Boot_Sequence(void)
000000  f64010c4          MOV      r0,#0x9c4
;;;465    {
;;;466    //	kalman_struct AngleKalman;
;;;467    //	kalman_init(&AngleKalman,0, 5,0.1,30000);
;;;468    
;;;469    	delay_ms(2500);
000004  f8dfc030          LDR      r12,|L3.56|
000008  df00              SVC      #0x0
;;;470    	FollowMode = 1;
00000a  eeb70a00          VMOV.F32 s0,#1.00000000
00000e  480b              LDR      r0,|L3.60|
000010  ed800a00          VSTR     s0,[r0,#0]
;;;471    	PIDBegin_CAN = 1;
000014  2001              MOVS     r0,#1
000016  490a              LDR      r1,|L3.64|
000018  7008              STRB     r0,[r1,#0]
;;;472    	delay_ms(800);
00001a  f44f7048          MOV      r0,#0x320
00001e  f8dfc018          LDR      r12,|L3.56|
000022  df00              SVC      #0x0
;;;473    	FollowMode = 0;
000024  ed9f0a07          VLDR     s0,|L3.68|
000028  4804              LDR      r0,|L3.60|
00002a  ed800a00          VSTR     s0,[r0,#0]
;;;474    	os_tsk_delete_self();
00002e  2000              MOVS     r0,#0
000030  f8dfc014          LDR      r12,|L3.72|
000034  df00              SVC      #0x0
;;;475    }
;;;476    
                          ENDP

000036  0000              DCW      0x0000
                  |L3.56|
                          DCD      rt_dly_wait
                  |L3.60|
                          DCD      YawPID
                  |L3.64|
                          DCD      PIDBegin_CAN
                  |L3.68|
000044  00000000          DCFS     0x00000000 ; 0
                  |L3.72|
                          DCD      rt_tsk_delete

                          AREA ||i._Z13DR16_DATA_Recv||, CODE, READONLY, ALIGN=2

                  _Z13DR16_DATA_Recv PROC ; DR16_DATA_Rec()
;;;296     */
;;;297     __task void DR16_DATA_Rec(void)
000000  b508              PUSH     {r3,lr}
;;;298     {
;;;299     	RC_Value *ptrmsg;
;;;300     	while(1)
000002  e00c              B        |L4.30|
                  |L4.4|
;;;301     	{
;;;302     		if(DR16_receive(&ptrmsg, 200) != OS_R_TMO )
000004  21c8              MOVS     r1,#0xc8
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       DR16_receive
00000c  2801              CMP      r0,#1
00000e  d002              BEQ      |L4.22|
;;;303     		{
;;;304     			os_dr16(ptrmsg);
000010  9800              LDR      r0,[sp,#0]
000012  f7fffffe          BL       os_dr16
                  |L4.22|
;;;305     		}
;;;306    	  os_dly_wait (2);
000016  2002              MOVS     r0,#2
000018  f8dfc004          LDR      r12,|L4.32|
00001c  df00              SVC      #0x0
                  |L4.30|
00001e  e7f1              B        |L4.4|
;;;307     	}
;;;308     }
;;;309     
                          ENDP

                  |L4.32|
                          DCD      rt_dly_wait

                          AREA ||i._Z15DisconnectCheckv||, CODE, READONLY, ALIGN=2

                  _Z15DisconnectCheckv PROC ; DisconnectCheck()
;;;231    uint8_t PIDBegin_DR16=0,PIDBegin_CAN=0,CAN2_YawAngle=0,CAN2_PitchMotor=0,CAN2_YawMotor=0,ExtiFlag=1;
;;;232    __task void DisconnectCheck(void)
000000  ed2d8b06          VPUSH    {d8-d10}
;;;233    {
000004  b084              SUB      sp,sp,#0x10
;;;234    
;;;235    	while(1)
000006  e02a              B        |L5.94|
                  |L5.8|
;;;236    	{
;;;237    //		ANO_ImuDataReturn1(&velocity.X,
;;;238    //						&velocity.Y,&velocity.Z,&acc.X,&acc.Y,
;;;239    //						&acc.Z,PWM1,PWM2,
;;;240    //						PWM3,PWM4);	
;;;241    			extern PID Pitchpid,Rollpid,Yawpid;
;;;242          u1_printf("%7.3f\t%7.3f\t%7.3f\r\n",Pitchpid.controutput,Rollpid.controutput,Yawpid.controutput);
000008  4815              LDR      r0,|L5.96|
00000a  ed900a08          VLDR     s0,[r0,#0x20]
00000e  ee101a10          VMOV     r1,s0
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       __aeabi_f2d
000018  ec410b18          VMOV     d8,r0,r1
00001c  4811              LDR      r0,|L5.100|
00001e  ed900a08          VLDR     s0,[r0,#0x20]
000022  ee101a10          VMOV     r1,s0
000026  4608              MOV      r0,r1
000028  f7fffffe          BL       __aeabi_f2d
00002c  ec410b19          VMOV     d9,r0,r1
000030  480d              LDR      r0,|L5.104|
000032  ed900a08          VLDR     s0,[r0,#0x20]
000036  ee101a10          VMOV     r1,s0
00003a  4608              MOV      r0,r1
00003c  f7fffffe          BL       __aeabi_f2d
000040  ec410b1a          VMOV     d10,r0,r1
000044  ed8d8b02          VSTR     d8,[sp,#8]
000048  ed8d9b00          VSTR     d9,[sp,#0]
00004c  ec532b1a          VMOV     r2,r3,d10
000050  a006              ADR      r0,|L5.108|
000052  f7fffffe          BL       u1_printf
;;;243    //		u1_printf("%7.3f\t%7.3f\t%7.3f\r\n",Pitchpid.error,Rollpid.error,Yawpid.error );
;;;244    //		u1_printf("%7.3f\t%7.3f\t%7.3f\r\n",Pitchpid.error,Eulla.pitch,Target.pitch );
;;;245    		
;;;246    //		if (os_evt_wait_or (BIT_0, 50) == OS_R_TMO)
;;;247    //		{
;;;248    //			PIDBegin_DR16 = 0;//若等待超时设置标志量为0
;;;249    //			ESC_STOP();
;;;250    //			shootonce = 0;
;;;251    //			shootcons = 0;
;;;252    //			os_evt_set (BIT_6, HandleDisconnectCheck);//断线保护
;;;253    //			u1_printf("PIDBegin_DR16 = 0\r\n");
;;;254    //		}
;;;255          delay_ms(50);
000056  2032              MOVS     r0,#0x32
000058  f8dfc024          LDR      r12,|L5.128|
00005c  df00              SVC      #0x0
                  |L5.94|
00005e  e7d3              B        |L5.8|
;;;256    //		else PIDBegin_DR16 = 1;
;;;257    //		if (os_evt_wait_or (BIT_1, 50) == OS_R_TMO) {}
;;;258    //		else PIDBegin_CAN = 1;
;;;259    //		if (os_evt_wait_or (BIT_2, 50) == OS_R_TMO) {
;;;260    //			CAN2_YawAngle = 0;//若等待超时设置标志量为0
;;;261    ////			u1_printf("CAN2_YawAngle = 0\r\n");
;;;262    //		}
;;;263    //		else{
;;;264    //			CAN2_YawAngle = 1;
;;;265    
;;;266    //		}
;;;267    //		if (os_evt_wait_or (BIT_3, 50) == OS_R_TMO)
;;;268    //		{
;;;269    //			CAN2_PitchMotor = 0;//若等待超时设置标志量为0
;;;270    ////			u1_printf("CAN2_PitchMotor = 0\r\n");
;;;271    //		}
;;;272    //		else CAN2_PitchMotor = 1;
;;;273    //		if (os_evt_wait_or (BIT_4, 50) == OS_R_TMO)
;;;274    //		{
;;;275    //			CAN2_YawMotor = 0;//若等待超时设置标志量为0
;;;276    ////			u1_printf("CAN2_YawMotor = 0\r\n");
;;;277    
;;;278    //		}
;;;279    //		else CAN2_YawMotor = 1;
;;;280    
;;;281    	}
;;;282    }
;;;283    
                          ENDP

                  |L5.96|
                          DCD      Yawpid
                  |L5.100|
                          DCD      Rollpid
                  |L5.104|
                          DCD      Pitchpid
                  |L5.108|
00006c  25372e33          DCB      "%7.3f\t%7.3f\t%7.3f\r\n",0
000070  66092537
000074  2e336609
000078  25372e33
00007c  660d0a00
                  |L5.128|
                          DCD      rt_dly_wait

                          AREA ||i._Z15Imu_data_Aguestv||, CODE, READONLY, ALIGN=2

                  _Z15Imu_data_Aguestv PROC ; Imu_data_Aguest()
;;;408    #define DEADTIME 300
;;;409    __task void Imu_data_Aguest(void)
000000  2004              MOVS     r0,#4
;;;410    {
;;;411    
;;;412    	os_itv_set(4);	/* 设置延迟周期 */
000002  f8dfc014          LDR      r12,|L6.24|
000006  df00              SVC      #0x0
;;;413    
;;;414    	while(1)
000008  e005              B        |L6.22|
                  |L6.10|
;;;415    	{
;;;416    			
;;;417    			Imu_data_Prepare();//MPU6050滤波
00000a  f7fffffe          BL       Imu_data_Prepare
;;;418    //		u1_printf("123\r\n");
;;;419    			os_dly_wait (2);
00000e  2002              MOVS     r0,#2
000010  f8dfc008          LDR      r12,|L6.28|
000014  df00              SVC      #0x0
                  |L6.22|
000016  e7f8              B        |L6.10|
;;;420    			
;;;421    	}
;;;422    
;;;423    }
;;;424    
                          ENDP

                  |L6.24|
                          DCD      rt_itv_set
                  |L6.28|
                          DCD      rt_dly_wait

                          AREA ||i._Z15PitchYaw_Aguestv||, CODE, READONLY, ALIGN=2

                  _Z15PitchYaw_Aguestv PROC ; PitchYaw_Aguest()
;;;358     */
;;;359    __task void PitchYaw_Aguest(void)
000000  ed2d8b02          VPUSH    {d8}
;;;360    {
;;;361    //	TIM1_timer(200,(void *)pitchyaw);
;;;362    	delay_ms(5000);
000004  f2413088          MOV      r0,#0x1388
000008  f8dfc034          LDR      r12,|L7.64|
00000c  df00              SVC      #0x0
;;;363    	while(1)
00000e  e016              B        |L7.62|
                  |L7.16|
;;;364    	{
;;;365    	    u32 Dt;
;;;366    //			delay_ms(1000);
;;;367    			{
;;;368    //				extern EULLA Eulla/*,LastEulla*/;//互补滤波后的欧拉角结构体
;;;369    			//	u1_printf("%7.3f\t%7.3f\t%7.3f\r\n",Eulla.yaw,Eulla.pitch,Eulla.roll );
;;;370    			}
;;;371    			Dt=RunTime1(StopCheck);
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       RunTime1
000016  4604              MOV      r4,r0
;;;372    			controlnormalmode_update(Dt/1000000);
000018  480a              LDR      r0,|L7.68|
00001a  fbb4f0f0          UDIV     r0,r4,r0
00001e  ee000a10          VMOV     s0,r0
000022  eeb80a40          VCVT.F32.U32 s0,s0
000026  eeb08a40          VMOV.F32 s16,s0
00002a  f7fffffe          BL       controlnormalmode_update
;;;373    //			delay_ms(2);
;;;374    //			u1_printf("%d\t%d\t%d\t%d\t\r\n",PWM1,PWM2,PWM3,PWM4);
;;;375          RunTime1(StartCheck);
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       RunTime1
;;;376    			os_dly_wait(2);
000034  2002              MOVS     r0,#2
000036  f8dfc008          LDR      r12,|L7.64|
00003a  df00              SVC      #0x0
;;;377    
;;;378    	}
00003c  bf00              NOP      
                  |L7.62|
00003e  e7e7              B        |L7.16|
;;;379    }
;;;380    
                          ENDP

                  |L7.64|
                          DCD      rt_dly_wait
                  |L7.68|
                          DCD      0x000f4240

                          AREA ||i._Z18AHRS_Update_Aguestv||, CODE, READONLY, ALIGN=2

                  _Z18AHRS_Update_Aguestv PROC ; AHRS_Update_Aguest()
;;;383     */
;;;384    __task void AHRS_Update_Aguest(void)
000000  ed2d8b02          VPUSH    {d8}
;;;385    {
;;;386    
;;;387    
;;;388    //	os_itv_set(10);	/* 设置延迟周期 */
;;;389    
;;;390      u32 dt;
;;;391    	while(1)
000004  e014              B        |L8.48|
                  |L8.6|
;;;392    	{	
;;;393    //			u1_printf("%7.3f\t %7.3f\t %7.3f\t %7.3f\t %7.3f\t %7.3f\r\n", ACC.Y, ACC.X, ACC.Z, VELOCITY.X, VELOCITY.Y, VELOCITY.Z);
;;;394    		  dt=RunTime2(StopCheck);
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       RunTime2
;;;395    			AHRS_Update(dt/1000000);
00000c  4909              LDR      r1,|L8.52|
00000e  fbb0f1f1          UDIV     r1,r0,r1
000012  ee001a10          VMOV     s0,r1
000016  eeb80a40          VCVT.F32.U32 s0,s0
00001a  eeb08a40          VMOV.F32 s16,s0
00001e  f7fffffe          BL       AHRS_Update
;;;396    			RunTime2(StartCheck);
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       RunTime2
;;;397    //			u1_printf("%7.3f\t%7.3f\t%7.3f\r\n",Eulla.yaw,Eulla.pitch,Eulla.roll );
;;;398    //			delay_ms(2);
;;;399    			os_dly_wait(2);
000028  2002              MOVS     r0,#2
00002a  f8dfc00c          LDR      r12,|L8.56|
00002e  df00              SVC      #0x0
                  |L8.48|
000030  e7e9              B        |L8.6|
;;;400    	}
;;;401    }
;;;402    
                          ENDP

000032  0000              DCW      0x0000
                  |L8.52|
                          DCD      0x000f4240
                  |L8.56|
                          DCD      rt_dly_wait

                          AREA ||i._Z3ttpv||, CODE, READONLY, ALIGN=2

                  _Z3ttpv PROC ; ttp()
;;;286     */
;;;287    void ttp(void)
000000  b510              PUSH     {r4,lr}
;;;288    {
;;;289    	Location(&MotorMassage);
000002  4802              LDR      r0,|L9.12|
000004  f7fffffe          BL       Location
;;;290    }
000008  bd10              POP      {r4,pc}
;;;291    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      MotorMassage

                          AREA ||i._Z8PWM_Initv||, CODE, READONLY, ALIGN=1

                  _Z8PWM_Initv PROC ; PWM_Init()
;;;431    
;;;432    void PWM_Init()
000000  f44f707a          MOV      r0,#0x3e8
;;;433    {
;;;434    	  PWM1=1000;
000004  06c1              LSLS     r1,r0,#27
000006  6348              STR      r0,[r1,#0x34]
;;;435    		PWM2=1000;
000008  6388              STR      r0,[r1,#0x38]
;;;436    		PWM3=1000;
00000a  63c8              STR      r0,[r1,#0x3c]
;;;437    		PWM4=1000;
00000c  6408              STR      r0,[r1,#0x40]
;;;438    }
00000e  4770              BX       lr
;;;439    __task void PWM_Task(void)
                          ENDP


                          AREA ||i._Z8PWM_Taskv||, CODE, READONLY, ALIGN=2

                  _Z8PWM_Taskv PROC ; PWM_Task()
;;;438    }
;;;439    __task void PWM_Task(void)
000000  f44f70fa          MOV      r0,#0x1f4
;;;440    {
;;;441    	delay_ms(500);
000004  f8dfc01c          LDR      r12,|L11.36|
000008  df00              SVC      #0x0
;;;442    	//PWM应该不需要初始化，直接输出
;;;443      PWM1=1000;
00000a  f44f707a          MOV      r0,#0x3e8
00000e  06c1              LSLS     r1,r0,#27
000010  6348              STR      r0,[r1,#0x34]
;;;444    	PWM2=1000;
000012  6388              STR      r0,[r1,#0x38]
;;;445    	PWM3=1000;
000014  63c8              STR      r0,[r1,#0x3c]
;;;446    	PWM4=1000;
000016  6408              STR      r0,[r1,#0x40]
;;;447    //	delay_ms(500);
;;;448    //	PWM1=1700;
;;;449    //	PWM2=1700;
;;;450    //	PWM3=1700;
;;;451    //	PWM4=1700;
;;;452    	while(1)
000018  e003              B        |L11.34|
                  |L11.26|
;;;453    	{
;;;454    //	bsp_LedToggle(1);
;;;455    //	bsp_LedToggle(2);
;;;456    	delay_ms(50);
00001a  2032              MOVS     r0,#0x32
00001c  f8dfc004          LDR      r12,|L11.36|
000020  df00              SVC      #0x0
                  |L11.34|
000022  e7fa              B        |L11.26|
;;;457    	}
;;;458    }
;;;459    //junfu   Code1
                          ENDP

                  |L11.36|
                          DCD      rt_dly_wait

                          AREA ||i._Z9TaskStartv||, CODE, READONLY, ALIGN=2

                  _Z9TaskStartv PROC ; TaskStart()
;;;134     */
;;;135    __task void TaskStart(void)
000000  f7fffffe          BL       _Z13AppTaskCreatev ; AppTaskCreate()
;;;136    {
;;;137    	AppTaskCreate();/* 创建任务 */
;;;138    	AppObjCreate();/* 创建任务通信机制和有时序需要的初始化步骤 */
000004  f7fffffe          BL       _Z12AppObjCreatev ; AppObjCreate()
;;;139    	while(1)
000008  e003              B        |L12.18|
                  |L12.10|
;;;140    	{
;;;141    		os_dly_wait(1);
00000a  2001              MOVS     r0,#1
00000c  f8dfc004          LDR      r12,|L12.20|
000010  df00              SVC      #0x0
                  |L12.18|
000012  e7fa              B        |L12.10|
;;;142    	}
;;;143    }
;;;144    
                          ENDP

                  |L12.20|
                          DCD      rt_dly_wait

                          AREA ||i.__sti___8_main_cpp_7d6d8351||, CODE, READONLY, ALIGN=2

                  __sti___8_main_cpp_7d6d8351 PROC
000000  b510              PUSH     {r4,lr}
000002  ed2d8b0e          VPUSH    {d8-d14}
000006  b08a              SUB      sp,sp,#0x28
000008  eeb70a08          VMOV.F32 s0,#1.50000000
00000c  ed8d0a08          VSTR     s0,[sp,#0x20]
000010  ed9f0a87          VLDR     s0,|L13.560|
000014  ed8d0a07          VSTR     s0,[sp,#0x1c]
000018  eeb00a00          VMOV.F32 s0,#2.00000000
00001c  ed8d0a06          VSTR     s0,[sp,#0x18]
000020  ed9f0a84          VLDR     s0,|L13.564|
000024  ed8d0a05          VSTR     s0,[sp,#0x14]
000028  ed9f0a82          VLDR     s0,|L13.564|
00002c  ed8d0a04          VSTR     s0,[sp,#0x10]
000030  ed9f0a80          VLDR     s0,|L13.564|
000034  ed8d0a03          VSTR     s0,[sp,#0xc]
000038  ed9f0a7f          VLDR     s0,|L13.568|
00003c  ed8d0a02          VSTR     s0,[sp,#8]
000040  ed9f0a7e          VLDR     s0,|L13.572|
000044  ed8d0a01          VSTR     s0,[sp,#4]
000048  ed9f0a7d          VLDR     s0,|L13.576|
00004c  ed8d0a00          VSTR     s0,[sp,#0]
000050  eef37a0e          VMOV.F32 s15,#30.00000000
000054  ed9f7a7a          VLDR     s14,|L13.576|
000058  eddf6a7a          VLDR     s13,|L13.580|
00005c  ed9f6a7a          VLDR     s12,|L13.584|
000060  eddf5a79          VLDR     s11,|L13.584|
000064  ed9f5a78          VLDR     s10,|L13.584|
000068  eddf4a78          VLDR     s9,|L13.588|
00006c  ed9f4a78          VLDR     s8,|L13.592|
000070  eddf3a70          VLDR     s7,|L13.564|
000074  ed9f3a77          VLDR     s6,|L13.596|
000078  eddf2a77          VLDR     s5,|L13.600|
00007c  ed9f2a77          VLDR     s4,|L13.604|
000080  eddf1a71          VLDR     s3,|L13.584|
000084  ed9f1a70          VLDR     s2,|L13.584|
000088  eddf0a6f          VLDR     s1,|L13.584|
00008c  ed9f0a6e          VLDR     s0,|L13.584|
000090  4873              LDR      r0,|L13.608|
000092  f7fffffe          BL       _ZN8FUZZYPIDC1Efffffffffffffffffffffffff ; FUZZYPID::FUZZYPID(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
000096  ed9f0a73          VLDR     s0,|L13.612|
00009a  ed8d0a08          VSTR     s0,[sp,#0x20]
00009e  ed9f0a72          VLDR     s0,|L13.616|
0000a2  ed8d0a07          VSTR     s0,[sp,#0x1c]
0000a6  ed9f0a71          VLDR     s0,|L13.620|
0000aa  ed8d0a06          VSTR     s0,[sp,#0x18]
0000ae  ed9f0a66          VLDR     s0,|L13.584|
0000b2  ed8d0a05          VSTR     s0,[sp,#0x14]
0000b6  ed9f0a64          VLDR     s0,|L13.584|
0000ba  ed8d0a04          VSTR     s0,[sp,#0x10]
0000be  ed9f0a62          VLDR     s0,|L13.584|
0000c2  ed8d0a03          VSTR     s0,[sp,#0xc]
0000c6  ed9f0a6a          VLDR     s0,|L13.624|
0000ca  ed8d0a02          VSTR     s0,[sp,#8]
0000ce  ed9f0a69          VLDR     s0,|L13.628|
0000d2  ed8d0a01          VSTR     s0,[sp,#4]
0000d6  ed9f0a68          VLDR     s0,|L13.632|
0000da  ed8d0a00          VSTR     s0,[sp,#0]
0000de  eddf7a5a          VLDR     s15,|L13.584|
0000e2  ed9f7a57          VLDR     s14,|L13.576|
0000e6  eddf6a65          VLDR     s13,|L13.636|
0000ea  ed9f6a57          VLDR     s12,|L13.584|
0000ee  eddf5a64          VLDR     s11,|L13.640|
0000f2  ed9f5a64          VLDR     s10,|L13.644|
0000f6  eddf4a64          VLDR     s9,|L13.648|
0000fa  ed9f4a64          VLDR     s8,|L13.652|
0000fe  eddf3a4d          VLDR     s7,|L13.564|
000102  ed9f3a54          VLDR     s6,|L13.596|
000106  eddf2a60          VLDR     s5,|L13.648|
00010a  ed9f2a60          VLDR     s4,|L13.652|
00010e  eddf1a4e          VLDR     s3,|L13.584|
000112  ed9f1a5f          VLDR     s2,|L13.656|
000116  eddf0a5f          VLDR     s1,|L13.660|
00011a  eeb20a01          VMOV.F32 s0,#8.50000000
00011e  485e              LDR      r0,|L13.664|
000120  f7fffffe          BL       _ZN8FUZZYPIDC1Efffffffffffffffffffffffff ; FUZZYPID::FUZZYPID(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
000124  4c5d              LDR      r4,|L13.668|
000126  ed9f8a48          VLDR     s16,|L13.584|
00012a  eddf8a47          VLDR     s17,|L13.584|
00012e  ed9f9a46          VLDR     s18,|L13.584|
000132  eddf9a45          VLDR     s19,|L13.584|
000136  ed9faa5a          VLDR     s20,|L13.672|
00013a  eddfaa5a          VLDR     s21,|L13.676|
00013e  ed9fba5a          VLDR     s22,|L13.680|
000142  ed9fca5a          VLDR     s24,|L13.684|
000146  eddfca42          VLDR     s25,|L13.592|
00014a  ed9fda40          VLDR     s26,|L13.588|
00014e  eddfda4d          VLDR     s27,|L13.644|
000152  ed9fea4b          VLDR     s28,|L13.640|
000156  eddfba3a          VLDR     s23,|L13.576|
00015a  eeb06a6b          VMOV.F32 s12,s23
00015e  eef05a4e          VMOV.F32 s11,s28
000162  eeb05a6d          VMOV.F32 s10,s27
000166  eef04a4d          VMOV.F32 s9,s26
00016a  eeb04a6c          VMOV.F32 s8,s25
00016e  eef03a4c          VMOV.F32 s7,s24
000172  eeb03a4b          VMOV.F32 s6,s22
000176  eef02a6a          VMOV.F32 s5,s21
00017a  eeb02a4a          VMOV.F32 s4,s20
00017e  eef01a69          VMOV.F32 s3,s19
000182  eeb01a49          VMOV.F32 s2,s18
000186  eef00a68          VMOV.F32 s1,s17
00018a  eeb00a48          VMOV.F32 s0,s16
00018e  4620              MOV      r0,r4
000190  f7fffffe          BL       _ZN7PIDBaseC1Efffffffffffff ; PIDBase::PIDBase(float, float, float, float, float, float, float, float, float, float, float, float, float)
000194  4604              MOV      r4,r0
000196  bf00              NOP      
000198  ed9f0a45          VLDR     s0,|L13.688|
00019c  ed8d0a08          VSTR     s0,[sp,#0x20]
0001a0  ed9f0a44          VLDR     s0,|L13.692|
0001a4  ed8d0a07          VSTR     s0,[sp,#0x1c]
0001a8  ed9f0a27          VLDR     s0,|L13.584|
0001ac  ed8d0a06          VSTR     s0,[sp,#0x18]
0001b0  ed9f0a25          VLDR     s0,|L13.584|
0001b4  ed8d0a05          VSTR     s0,[sp,#0x14]
0001b8  ed9f0a23          VLDR     s0,|L13.584|
0001bc  ed8d0a04          VSTR     s0,[sp,#0x10]
0001c0  ed9f0a21          VLDR     s0,|L13.584|
0001c4  ed8d0a03          VSTR     s0,[sp,#0xc]
0001c8  eeb00a08          VMOV.F32 s0,#3.00000000
0001cc  ed8d0a02          VSTR     s0,[sp,#8]
0001d0  eeb10a0c          VMOV.F32 s0,#7.00000000
0001d4  ed8d0a01          VSTR     s0,[sp,#4]
0001d8  eeb20a0e          VMOV.F32 s0,#15.00000000
0001dc  ed8d0a00          VSTR     s0,[sp,#0]
0001e0  eddf7a35          VLDR     s15,|L13.696|
0001e4  ed9f7a35          VLDR     s14,|L13.700|
0001e8  eddf6a35          VLDR     s13,|L13.704|
0001ec  ed9f6a16          VLDR     s12,|L13.584|
0001f0  eddf5a23          VLDR     s11,|L13.640|
0001f4  ed9f5a23          VLDR     s10,|L13.644|
0001f8  eddf4a32          VLDR     s9,|L13.708|
0001fc  ed9f4a32          VLDR     s8,|L13.712|
000200  eddf3a0c          VLDR     s7,|L13.564|
000204  ed9f3a13          VLDR     s6,|L13.596|
000208  eddf2a2e          VLDR     s5,|L13.708|
00020c  ed9f2a2e          VLDR     s4,|L13.712|
000210  eddf1a0d          VLDR     s3,|L13.584|
000214  ed9f1a2d          VLDR     s2,|L13.716|
000218  eddf0a0b          VLDR     s1,|L13.584|
00021c  eeb10a04          VMOV.F32 s0,#5.00000000
000220  482b              LDR      r0,|L13.720|
000222  f7fffffe          BL       _ZN9FUZZYSPIDC1Efffffffffffffffffffffffff ; FUZZYSPID::FUZZYSPID(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
000226  b00a              ADD      sp,sp,#0x28
000228  ecbd8b0e          VPOP     {d8-d14}
00022c  bd10              POP      {r4,pc}
                          ENDP

00022e  0000              DCW      0x0000
                  |L13.560|
000230  3fe66666          DCFS     0x3fe66666 ; 1.7999999523162842
                  |L13.564|
000234  43fa0000          DCFS     0x43fa0000 ; 500
                  |L13.568|
000238  425c0000          DCFS     0x425c0000 ; 55
                  |L13.572|
00023c  42480000          DCFS     0x42480000 ; 50
                  |L13.576|
000240  42700000          DCFS     0x42700000 ; 60
                  |L13.580|
000244  42b40000          DCFS     0x42b40000 ; 90
                  |L13.584|
000248  00000000          DCFS     0x00000000 ; 0
                  |L13.588|
00024c  459c4000          DCFS     0x459c4000 ; 5000
                  |L13.592|
000250  c59c4000          DCFS     0xc59c4000 ; -5000
                  |L13.596|
000254  c3fa0000          DCFS     0xc3fa0000 ; -500
                  |L13.600|
000258  45bb8000          DCFS     0x45bb8000 ; 6000
                  |L13.604|
00025c  c5bb8000          DCFS     0xc5bb8000 ; -6000
                  |L13.608|
                          DCD      PitchPID
                  |L13.612|
000264  40333333          DCFS     0x40333333 ; 2.7999999523162842
                  |L13.616|
000268  40866666          DCFS     0x40866666 ; 4.1999998092651367
                  |L13.620|
00026c  3f99999a          DCFS     0x3f99999a ; 1.2000000476837158
                  |L13.624|
000270  42960000          DCFS     0x42960000 ; 75
                  |L13.628|
000274  428c0000          DCFS     0x428c0000 ; 70
                  |L13.632|
000278  42a00000          DCFS     0x42a00000 ; 80
                  |L13.636|
00027c  42f00000          DCFS     0x42f00000 ; 120
                  |L13.640|
000280  7f000000          DCFS     0x7f000000 ; 1.7014118346046923e+38
                  |L13.644|
000284  ff000000          DCFS     0xff000000 ; -1.7014118346046923e+38
                  |L13.648|
000288  458ca000          DCFS     0x458ca000 ; 4500
                  |L13.652|
00028c  c58ca000          DCFS     0xc58ca000 ; -4500
                  |L13.656|
000290  3f8ccccd          DCFS     0x3f8ccccd ; 1.1000000238418579
                  |L13.660|
000294  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
                  |L13.664|
                          DCD      YawPID
                  |L13.668|
                          DCD      CarFramePID
                  |L13.672|
0002a0  c69c4000          DCFS     0xc69c4000 ; -20000
                  |L13.676|
0002a4  469c4000          DCFS     0x469c4000 ; 20000
                  |L13.680|
0002a8  c53b8000          DCFS     0xc53b8000 ; -3000
                  |L13.684|
0002ac  453b8000          DCFS     0x453b8000 ; 3000
                  |L13.688|
0002b0  3d4ccccd          DCFS     0x3d4ccccd ; 0.05000000074505806
                  |L13.692|
0002b4  3e99999a          DCFS     0x3e99999a ; 0.30000001192092896
                  |L13.696|
0002b8  43480000          DCFS     0x43480000 ; 200
                  |L13.700|
0002bc  43960000          DCFS     0x43960000 ; 300
                  |L13.704|
0002c0  43c80000          DCFS     0x43c80000 ; 400
                  |L13.708|
0002c4  447a0000          DCFS     0x447a0000 ; 1000
                  |L13.712|
0002c8  c47a0000          DCFS     0xc47a0000 ; -1000
                  |L13.716|
0002cc  38d1b717          DCFS     0x38d1b717 ; 9.9999997473787516e-05
                  |L13.720|
                          DCD      TurnplatePID

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;541     */
;;;542    int main (void)
000000  f7fffffe          BL       bsp_Init
;;;543    {
;;;544    	/* 初始化外设 */
;;;545    	bsp_Init();
;;;546    	ControlTask_Init();
000004  f7fffffe          BL       _Z16ControlTask_Initv ; ControlTask_Init()
;;;547     	os_sys_init_user (TaskStart,              /* 任务函数 */
000008  f7fffffe          BL       os_set_env
00000c  4a03              LDR      r2,|L14.28|
00000e  4904              LDR      r1,|L14.32|
000010  4804              LDR      r0,|L14.36|
000012  f8dfc014          LDR      r12,|L14.40|
000016  df00              SVC      #0x0
;;;548    	                  200,                         /* 任务优先级 */
;;;549    	                  &TaskStartStk,          /* 任务栈 */
;;;550    	                  sizeof(TaskStartStk)); /* 任务栈大小，单位字节数 */
;;;551    	while(1);
000018  bf00              NOP      
                  |L14.26|
00001a  e7fe              B        |L14.26|
;;;552    }
                          ENDP

                  |L14.28|
                          DCD      TaskStartStk
                  |L14.32|
                          DCD      0x000200c8
                  |L14.36|
                          DCD      _Z9TaskStartv ; TaskStart()
                  |L14.40|
                          DCD      rt_sys_init

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z12AppObjCreatev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z12AppObjCreatev||
                          DCD      0x00000001

                          AREA ||area_number.16||, LINKORDER=||i._Z8PWM_Taskv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8PWM_Taskv||
                          DCD      0x00000001

                          AREA ||area_number.17||, LINKORDER=||i._Z13Boot_Sequencev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13Boot_Sequencev||
                          DCD      0x00000001

                          AREA ||area_number.18||, LINKORDER=||i._Z15Imu_data_Aguestv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15Imu_data_Aguestv||
                          DCD      0x00000001

                          AREA ||area_number.19||, LINKORDER=||i._Z18AHRS_Update_Aguestv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z18AHRS_Update_Aguestv||
                          DCD      0x00000001

                          AREA ||area_number.20||, LINKORDER=||i._Z15PitchYaw_Aguestv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.20||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15PitchYaw_Aguestv||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._Z13DR16_DATA_Recv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13DR16_DATA_Recv||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._Z15DisconnectCheckv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15DisconnectCheckv||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._Z13AppTaskCreatev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13AppTaskCreatev||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._Z9TaskStartv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z9TaskStartv||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._Z3ttpv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z3ttpv||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._Z8PWM_Initv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8PWM_Initv||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i.main||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.main||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i.__sti___8_main_cpp_7d6d8351||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___8_main_cpp_7d6d8351||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  PitchPID
                          %        228
                  YawPID
                          %        228
                  CarFramePID
                          %        164
                  TurnplatePID
                          %        292
                  TaskStartStk
                          %        512
                  DR16_DATA_RecStk
                          %        512
                  DisconnectCheckStk
                          %        512
                  PitchYaw_AguestStk
                          %        1024
                  AHRS_Update_AguestStk
                          %        512
                  Imu_data_AguestStk
                          %        512
                  PWM_TaskStk
                          %        512
                  Boot_SequenceStk
                          %        512
                  DR16_SxValueStk
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  TIMEALL
                          %        8
                  DUOJI_OPEN
000008  02bc              DCW      0x02bc
                  DUOJI_CLOSE
00000a  0631              DCW      0x0631
                  HandleDEBUG_DATA
                          DCD      0x00000000
                  HandleDR16_DATA_Rec
                          DCD      0x00000000
                  HandleDisconnectCheck
                          DCD      0x00000000
                  HandlePitchYaw_Aguest
                          DCD      0x00000000
                  HandleAHRS_Update_Aguest
                          DCD      0x00000000
                  HandleImu_data_Aguest
                          DCD      0x00000000
                  HandlePWM_Task
                          DCD      0x00000000
                  HandleBoot_Sequence
                          DCD      0x00000000
                  HandleDR16_SxValue
                          DCD      0x00000000
                  timer200msflag
000030  00                DCB      0x00
                  positionreachflag
000031  00                DCB      0x00
                  shootonce
000032  00                DCB      0x00
                  shootcons
000033  00                DCB      0x00
                  tmee
                          DCD      0x00000000
                  tmeee
                          DCD      0x00000000
                  PIDBegin_DR16
00003c  00                DCB      0x00
                  PIDBegin_CAN
00003d  00                DCB      0x00
                  CAN2_YawAngle
00003e  00                DCB      0x00
                  CAN2_PitchMotor
00003f  00                DCB      0x00
                  CAN2_YawMotor
000040  00                DCB      0x00
                  ExtiFlag
000041  010000            DCB      0x01,0x00,0x00
                  realshoot
                          %        8
                  B_freq
00004c  0000              DCB      0x00,0x00
                  B_speed
00004e  0000              DCB      0x00,0x00
                  BackupMode
000050  00000000          DCB      0x00,0x00,0x00,0x00
                  tmr2
                          DCD      0x00000000

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___8_main_cpp_7d6d8351

                          AREA ||i._ZN9FUZZYSPIDC1Efffffffffffffffffffffffff||, COMGROUP=_ZN9FUZZYSPIDC1Efffffffffffffffffffffffff, CODE, READONLY, ALIGN=1

                  _ZN9FUZZYSPIDC2Efffffffffffffffffffffffff                  ; Alternate entry point ; FUZZYSPID::FUZZYSPID__sub_object(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
                  _ZN9FUZZYSPIDC1Efffffffffffffffffffffffff PROC ; FUZZYSPID::FUZZYSPID(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
;;;183    		
;;;184    	FUZZYSPID(float m_Kp, float m_Ki, float m_Kd, float m_Target,\
;;;185    		 float m_Rpi, float m_Rpa, float m_Rii, float m_Ria,\
;;;186    		 float m_Rdi, float m_Rda, float m_Ti, float m_Ta,float m_DeadZone,
;;;187    
;;;188    		 float m_NB_PB, float m_NM_PM, float m_NS_PS,\
;;;189    		 float m_NB_PB_kp,float m_NM_PM_kp, float m_NS_PS_kp,\
;;;190    		 float m_NB_PB_ki,float m_NM_PM_ki, float m_NS_PS_ki,\
;;;191    		 float m_NB_PB_kd,float m_NM_PM_kd, float m_NS_PS_kd
;;;192    			 ):FUZZYPID(m_Kp,m_Ki,m_Kd,m_Target,\
;;;193    				m_Rpi,m_Rpa,m_Rii,m_Ria,\
;;;194    				m_Rdi,m_Rda,m_Ti,m_Ta,m_DeadZone,\
;;;195    				m_NB_PB,m_NM_PM,m_NS_PS,\
;;;196    				m_NB_PB_kp,m_NM_PM_kp,m_NS_PS_kp,\
;;;197    				m_NB_PB_ki,m_NM_PM_ki,m_NS_PS_ki,\
;;;198    				m_NB_PB_kd,m_NM_PM_kd,m_NS_PS_kd)
;;;199    		 {};
;;;200    	void AdjustPID(void);
000000  b511              PUSH     {r0,r4,lr}
000002  ed2d0b10          VPUSH    {d0-d7}
000006  ed2d8b10          VPUSH    {d8-d15}
00000a  b089              SUB      sp,sp,#0x24
00000c  4604              MOV      r4,r0
00000e  eeb08a40          VMOV.F32 s16,s0
000012  eef08a60          VMOV.F32 s17,s1
000016  eeb09a41          VMOV.F32 s18,s2
00001a  eef09a61          VMOV.F32 s19,s3
00001e  eeb0aa42          VMOV.F32 s20,s4
000022  eef0aa62          VMOV.F32 s21,s5
000026  eeb0ba43          VMOV.F32 s22,s6
00002a  eef0ba63          VMOV.F32 s23,s7
00002e  eeb0ca44          VMOV.F32 s24,s8
000032  eef0ca64          VMOV.F32 s25,s9
000036  eeb0da45          VMOV.F32 s26,s10
00003a  eef0da65          VMOV.F32 s27,s11
00003e  eeb0ea46          VMOV.F32 s28,s12
000042  eef0ea66          VMOV.F32 s29,s13
000046  eeb0fa47          VMOV.F32 s30,s14
00004a  edddfa2c          VLDR     s31,[sp,#0xb0]
00004e  ed9d0a34          VLDR     s0,[sp,#0xd0]
000052  ed8d0a08          VSTR     s0,[sp,#0x20]
000056  ed9d0a33          VLDR     s0,[sp,#0xcc]
00005a  ed8d0a07          VSTR     s0,[sp,#0x1c]
00005e  ed9d0a32          VLDR     s0,[sp,#0xc8]
000062  ed8d0a06          VSTR     s0,[sp,#0x18]
000066  ed9d0a31          VLDR     s0,[sp,#0xc4]
00006a  ed8d0a05          VSTR     s0,[sp,#0x14]
00006e  ed9d0a30          VLDR     s0,[sp,#0xc0]
000072  ed8d0a04          VSTR     s0,[sp,#0x10]
000076  ed9d0a2f          VLDR     s0,[sp,#0xbc]
00007a  ed8d0a03          VSTR     s0,[sp,#0xc]
00007e  ed9d0a2e          VLDR     s0,[sp,#0xb8]
000082  ed8d0a02          VSTR     s0,[sp,#8]
000086  ed9d0a2d          VLDR     s0,[sp,#0xb4]
00008a  ed8d0a01          VSTR     s0,[sp,#4]
00008e  edcdfa00          VSTR     s31,[sp,#0]
000092  eddd7a28          VLDR     s15,[sp,#0xa0]
000096  eeb07a4f          VMOV.F32 s14,s30
00009a  eef06a6e          VMOV.F32 s13,s29
00009e  eeb06a4e          VMOV.F32 s12,s28
0000a2  eef05a6d          VMOV.F32 s11,s27
0000a6  eeb05a4d          VMOV.F32 s10,s26
0000aa  eef04a6c          VMOV.F32 s9,s25
0000ae  eeb04a4c          VMOV.F32 s8,s24
0000b2  eef03a6b          VMOV.F32 s7,s23
0000b6  eeb03a4b          VMOV.F32 s6,s22
0000ba  eef02a6a          VMOV.F32 s5,s21
0000be  eeb02a4a          VMOV.F32 s4,s20
0000c2  eef01a69          VMOV.F32 s3,s19
0000c6  eeb01a49          VMOV.F32 s2,s18
0000ca  eef00a68          VMOV.F32 s1,s17
0000ce  eeb00a48          VMOV.F32 s0,s16
0000d2  4620              MOV      r0,r4
0000d4  f7fffffe          BL       _ZN8FUZZYPIDC1Efffffffffffffffffffffffff ; FUZZYPID::FUZZYPID(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
0000d8  4604              MOV      r4,r0
0000da  4620              MOV      r0,r4
0000dc  b009              ADD      sp,sp,#0x24
0000de  ecbd8b10          VPOP     {d8-d15}
0000e2  b011              ADD      sp,sp,#0x44
0000e4  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.105||, COMGROUP=_ZN9FUZZYSPIDC1Efffffffffffffffffffffffff, LINKORDER=||i._ZN9FUZZYSPIDC1Efffffffffffffffffffffffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.105||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9FUZZYSPIDC1Efffffffffffffffffffffffff||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_7d6d8351___Z7__REV16j|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_main_cpp_7d6d8351___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_7d6d8351___Z7__REVSHi|
#line 144
|__asm___8_main_cpp_7d6d8351___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_7d6d8351___Z5__RRXj|
#line 300
|__asm___8_main_cpp_7d6d8351___Z5__RRXj| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
